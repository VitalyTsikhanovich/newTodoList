{"version":3,"sources":["api/todoList-api.tsx","app/app-reducer.ts","utils/error-utils.ts","features/TodoListsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodoListsList/tasks-reducer.ts","features/TodoListsList/TodoList/Task/Task.tsx","features/TodoListsList/TodoList/TodoList.tsx","features/TodoListsList/TodoListList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/TodoListsList/Login/auth-reducer.ts","features/TodoListsList/Login/Login.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todoListApi","get","title","post","id","delete","put","todoListId","taskId","taskTitle","model","authAPI","data","initialState","status","error","setErrorAC","type","setStatusAC","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","TextField","variant","value","onChange","event","currentTarget","label","helperText","IconButton","color","onClick","trim","AddBox","EditableSpan","props","console","log","editMode","setEditMode","onChangeTitleHandler","useCallback","e","onBlur","autoFocus","onDoubleClick","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","priority","deadline","startDate","description","then","res","resultCode","action","updateTaskAC","catch","warn","Task","useDispatch","onRemoveHandler","thunk","removeTaskAC","onChangeStatusHandler","newIsDoneValue","checked","Completed","New","newValue","className","Checkbox","Delete","TodoList","useSelector","state","todoList","useEffect","items","todoListIs","addTask","item","addTaskTS","onClickAllHandler","changeFilter","onClickActiveHandler","onClickCompletedHandler","changeTodoListTitle","newTitle","taskForTodoList","filter","removeTodoList","entityStatus","map","Button","TodoListList","todoLists","changeTodoListFilterAC","removeTodoListAC","removeTodoListTC","netTitle","changeTodoListTitleTC","addTodoList","addTodoListTC","Grid","container","style","padding","spacing","tl","Paper","Alert","elevation","ErrorSnackBar","app","handleClose","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","isLoggedIn","Login","auth","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","resetForm","validate","errors","test","to","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","render","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02d78aa5.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst setting = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e0364a45-b776-45ce-a5e2-732ef20bc482',\r\n    },\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...setting,\r\n})\r\n\r\n/*\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n     withCredentials: true,\r\n    headers: {\r\n     'API-KEY': 'e66d6d23-ce52-4d6b-97de-dbd90e8d428f'\r\n    }\r\n})\r\n*/\r\nexport const todoListApi = {\r\n    getTodoList() {\r\n        let promise = instance.get<Array<TodoListType>>('todo-lists')\r\n        return promise\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {\r\n            title: title,\r\n        })\r\n    },\r\n    deleteTodoList(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodoList(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n    },\r\n    getTasks(todoListId: string) {\r\n        let promise = instance.get<GetTasksResponse>(\r\n            `todo-lists/${todoListId}/tasks`\r\n        )\r\n        return promise\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(\r\n            `todo-lists/${todoListId}/tasks/${taskId}`\r\n        )\r\n    },\r\n    createTask(todoListId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(\r\n            `todo-lists/${todoListId}/tasks`,\r\n            {title: taskTitle}\r\n        )\r\n    },\r\n    updateTask(todoListId: string, taskId: string, model: UpdateTask) {\r\n        return instance.put<ResponseType<TaskType>>(\r\n            `todo-lists/${todoListId}/tasks/${taskId}`,\r\n            model\r\n        )\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType>(`auth/login`, data)\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later,\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTask = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\n// type _CreateTodoListResponseType={\r\n//     resultCode: number\r\n//     messages: Array<string>             //string[]\r\n//     data: {\r\n//         item: TodoListType\r\n//     }\r\n// }\r\n// type DeleteUpdateTodoListResponseType={\r\n//     resultCode: number\r\n//     messages: Array<string>\r\n//     data: {}\r\n// }\r\n// type _UpdateTodoListResponseType={\r\n//     resultCode: number\r\n//     messages: Array<string>\r\n//     data: {}\r\n// }\r\n","\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n}\r\n\r\nexport type setErrorACType = ReturnType<typeof setErrorAC>\r\nexport type setStatusACType = ReturnType<typeof setStatusAC>\r\n\r\ntype ActionsType = setErrorACType\r\n    | setStatusACType","import { Dispatch } from 'redux'\r\nimport {\r\n  setErrorAC,\r\n  setErrorACType,\r\n  setStatusAC,\r\n  setStatusACType,\r\n} from '../app/app-reducer'\r\nimport { ResponseType } from '../api/todoList-api'\r\nexport const handleServerAppError = <D>(\r\n  data: ResponseType<D>,\r\n  dispatch: Dispatch<setErrorACType | setStatusACType>\r\n) => {\r\n  if (data.messages.length) {\r\n    dispatch(setErrorAC(data.messages[0]))\r\n  } else {\r\n    dispatch(setErrorAC('Some error occurred'))\r\n  }\r\n  dispatch(setStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (\r\n  error: { message: string },\r\n  dispatch: Dispatch<setErrorACType | setStatusACType>\r\n) => {\r\n  dispatch(setErrorAC(error.message ? error.message : 'Some error'))\r\n  dispatch(setStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {todoListApi, TodoListType} from '../../api/todoList-api'\r\nimport {\r\n    RequestStatusType, setErrorACType,\r\n    setStatusAC,\r\n    setStatusACType,\r\n} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n// let initialState: Array<TodoListType> = [\r\n//     {id: todoListId1, title: 'What to learn ', filter: 'all'},\r\n//     {id: todoListId2, title: 'What to learn ', filter: 'all'},\r\n// ]\r\n\r\nlet initialState: Array<TodoListDomainType> = []\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const todoListReducer = (\r\n    state: InitialStateType = initialState,\r\n    action: ActionsType\r\n): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter((tl) => tl.id != action.todoListId)\r\n        case 'ADD-TODOLIST':\r\n            return [\r\n                {...action.todoList, filter: 'all', entityStatus: 'idle'},\r\n                ...state,\r\n            ]\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map((tl) =>\r\n                tl.id === action.id ? {...tl, entityStatus: action.status} : tl\r\n            )\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map((tl) =>\r\n                tl.id === action.id ? {...tl, title: action.newTitle} : tl\r\n            )\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map((tl) =>\r\n                tl.id === action.todoListId ? {...tl, filter: action.filter} : tl\r\n            )\r\n        case 'SET-TODOLIST':\r\n            return action.todoList.map((tl) => ({\r\n                ...tl,\r\n                filter: 'all',\r\n                entityStatus: 'idle',\r\n            }))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const changeTodoListFilterAC = (\r\n    filter: FilterValueType,\r\n    todoListId: string\r\n) => ({type: 'CHANGE-TODOLIST-FILTER', filter, todoListId} as const)\r\nexport const removeTodoListAC = (todoListId: string) =>\r\n    ({type: 'REMOVE-TODOLIST', todoListId} as const)\r\nexport const changeTodoListEntityStatusAC = (\r\n    id: string,\r\n    status: RequestStatusType\r\n) => ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status} as const)\r\nexport const addTodoListAC = (todoList: TodoListType) =>\r\n    ({type: 'ADD-TODOLIST', todoList} as const)\r\nexport const setTodoListAC = (todoList: Array<TodoListType>) =>\r\n    ({type: 'SET-TODOLIST', todoList: todoList} as const)\r\nexport const changeTodoListTitleAC = (id: string, newTitle: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', id, newTitle} as const)\r\n\r\nexport type ChangeFilterACType = ReturnType<typeof changeTodoListFilterAC>\r\nexport type RemoveTodoListACType = ReturnType<typeof removeTodoListAC>\r\nexport type AddTodoListACType = ReturnType<typeof addTodoListAC>\r\nexport type ChangeTodoListTitleACType = ReturnType<typeof changeTodoListTitleAC>\r\nexport type setTodoListACType = ReturnType<typeof setTodoListAC>\r\nexport type changeTodoListEntityStatusACType = ReturnType<typeof changeTodoListEntityStatusAC>\r\n\r\n// thunk\r\nexport const fetchTodoListTC = () => {\r\n    return (dispatch: Dispatch<ActionsType | setStatusACType| setErrorACType >) => {\r\n        //?типизация dispatch для примера\r\n        dispatch(setStatusAC('loading')) //крутилка\r\n        todoListApi.getTodoList().then((res) => {\r\n            dispatch(setTodoListAC(res.data))\r\n            dispatch(setStatusAC('succeeded'))\r\n        })\r\n            .catch((error)=>{\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodoListTC = (todoListId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        dispatch(changeTodoListEntityStatusAC(todoListId, 'loading'))\r\n        todoListApi.deleteTodoList(todoListId).then((res) => {\r\n            dispatch(removeTodoListAC(todoListId))\r\n            dispatch(setStatusAC('succeeded'))\r\n        })\r\n    }\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        todoListApi.createTodoList(title)\r\n            .then((res) => {\r\n                dispatch(addTodoListAC(res.data.data.item))\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport const changeTodoListTitleTC = (todoListId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListApi.updateTodoList(todoListId, title)\r\n            .then((res) => {\r\n            dispatch(changeTodoListTitleAC(todoListId, title))\r\n        })\r\n            .catch((error)=>{\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n// types\r\nexport type FilterValueType = 'all' | 'active' | 'completed'\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValueType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ActionsType =\r\n    | ChangeFilterACType\r\n    | RemoveTodoListACType\r\n    | AddTodoListACType\r\n    | ChangeTodoListTitleACType\r\n    | setTodoListACType\r\n    | changeTodoListEntityStatusACType\r\n","import React, { ChangeEvent, useState } from 'react'\r\nimport { IconButton, TextField } from '@material-ui/core'\r\nimport { AddBox } from '@material-ui/icons'\r\n\r\nexport type AddItemFormPropsType = {\r\n  addItem: (title: string) => void\r\n  disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(\r\n  ({ addItem, disabled = false }: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    let onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n      // получаем данные из input\r\n      setTitle(event.currentTarget.value)\r\n      setError(null)\r\n    }\r\n    const addItemHandler = () => {\r\n      if (title.trim() !== '') {\r\n        //убранными с двух сторон пробелами (trim)\r\n        addItem(title)\r\n        setTitle('') //добавить таску\r\n      } else {\r\n        setError('Title is required')\r\n      }\r\n    }\r\n\r\n    // const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    //     if (error !== null) {\r\n    //         setError(null);\r\n    //     }\r\n    //     if (e.charCode === 13) {\r\n    //         addItem();\r\n    //     }\r\n    // }\r\n\r\n    // let onPressHandler = (event: KeyboardEvent<HTMLInputElement>)=>{\r\n    // if (event.charCode === 13){\r\n    //     props.addTask\r\n    // }\r\n    // }\r\n\r\n    return (\r\n      <div>\r\n        <TextField\r\n          variant={'outlined'}\r\n          value={title}\r\n          onChange={onChangeHandler}\r\n          label={'Title'}\r\n          helperText={error}\r\n          error={!!error}\r\n          disabled={disabled}\r\n        />\r\n        <IconButton\r\n          color={'primary'}\r\n          onClick={addItemHandler}\r\n          disabled={disabled}\r\n        >\r\n          <AddBox />\r\n        </IconButton>\r\n        {/*<Button variant={'contained'} color={'primary'} onClick={addTask}> +</Button>*/}\r\n        {/*<button onClick={addTask}> +</button>*/}\r\n        {/*{error &&*/}\r\n        {/*// <div className='error-message'> {error}</div>*/}\r\n        {/*}*/}\r\n      </div>\r\n    )\r\n  }\r\n)\r\n","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('edit')\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }, [])\r\n    return editMode\r\n        ? <TextField variant={'outlined'} value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode}\r\n                     autoFocus={true}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title} </span>\r\n})","\r\nimport {\r\n  AddTodoListACType,\r\n  RemoveTodoListACType,\r\n  setTodoListACType,\r\n} from './todolists-reducer'\r\nimport {\r\n  TaskPriorities,\r\n  TaskStatuses,\r\n  TaskType,\r\n  todoListApi,\r\n  UpdateTask,\r\n} from '../../api/todoList-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\n\r\nimport {\r\n  setErrorAC,\r\n  setErrorACType,\r\n  setStatusAC,\r\n  setStatusACType,\r\n} from '../../app/app-reducer'\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkError,\r\n} from '../../utils/error-utils'\r\n\r\n// export let todoListId1 = v1()\r\n// export let todoListId2 = v1()\r\n\r\n// let initialState: TasksStateType = {\r\n//     [todoListId1]: [\r\n//         {id: v1(), title: 'CSS', isDone: true},\r\n//         {id: v1(), title: 'React', isDone: false},\r\n//     ],\r\n//     [todoListId2]: [\r\n//         {id: v1(), title: 'CSS', isDone: true},\r\n//         {id: v1(), title: 'React', isDone: false},\r\n//     ]\r\n// }\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const tasksReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: ActionsType\r\n): TasksStateType => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TASK':\r\n      return {\r\n        ...state,\r\n        [action.todoListId]: state[action.todoListId].filter(\r\n          (t) => t.id !== action.taskId\r\n        ),\r\n      }\r\n    case 'ADD-TASK':\r\n      return {\r\n        ...state,\r\n        [action.task.todoListId]: [\r\n          action.task,\r\n          ...state[action.task.todoListId],\r\n        ],\r\n      }\r\n\r\n    case 'UPDATE-TASK':\r\n      return {\r\n        ...state,\r\n        [action.todoListId]: state[action.todoListId].map((t) =>\r\n          t.id === action.taskId ? { ...t, ...action.model } : t\r\n        ),\r\n      }\r\n    case 'ADD-TODOLIST': {\r\n      return {\r\n        ...state,\r\n        [action.todoList.id]: [],\r\n      }\r\n    }\r\n    case 'REMOVE-TODOLIST': {\r\n      const stateCopy = { ...state }\r\n      delete stateCopy[action.todoListId]\r\n      return stateCopy\r\n    }\r\n    case 'SET-TODOLIST': {\r\n      const stateCopy = { ...state }\r\n      action.todoList.forEach((tl) => {\r\n        stateCopy[tl.id] = []\r\n      })\r\n      return stateCopy\r\n    }\r\n    case 'SET-TASK':\r\n      return { ...state, [action.todoListIs]: action.tasks }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) =>\r\n  ({ type: 'REMOVE-TASK', taskId, todoListId } as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n  ({ type: 'ADD-TASK', task } as const)\r\nexport const updateTaskAC = (\r\n  taskId: string,\r\n  model: UpdateDomainTaskModelType,\r\n  todoListId: string\r\n) =>\r\n  ({\r\n    type: 'UPDATE-TASK',\r\n    taskId,\r\n    model,\r\n    todoListId,\r\n  } as const)\r\nexport const setTaskAC = (tasks: Array<TaskType>, todoListIs: string) =>\r\n  ({\r\n    type: 'SET-TASK',\r\n    tasks,\r\n    todoListIs,\r\n  } as const)\r\n\r\nexport type removeTaskACType = ReturnType<typeof removeTaskAC>\r\nexport type addTaskACType = ReturnType<typeof addTaskAC>\r\nexport type setTaskACType = ReturnType<typeof setTaskAC>\r\nexport type UpdateTaskACType = ReturnType<typeof updateTaskAC>\r\n\r\n// thunk\r\nexport const fetchTasksTC = (todoListId: string) => (\r\n  dispatch: Dispatch<ActionsType | setStatusACType>\r\n) => {\r\n  dispatch(setStatusAC('loading')) //крутилка\r\n  todoListApi.getTasks(todoListId).then((res) => {\r\n    dispatch(setTaskAC(res.data.items, todoListId))\r\n    dispatch(setStatusAC('succeeded'))\r\n  })\r\n}\r\n\r\nexport const removeTaskTS = (taskId: string, todoListId: string) => (\r\n  dispatch: Dispatch\r\n) => {\r\n  todoListApi.deleteTask(todoListId, taskId).then((res) => {\r\n    const action = removeTaskAC(taskId, todoListId)\r\n    dispatch(action)\r\n  })\r\n}\r\n\r\nexport const addTaskTS = (title: string, todoListId: string) => (\r\n  dispatch: Dispatch\r\n) => {\r\n  dispatch(setStatusAC('loading'))\r\n  todoListApi\r\n    .createTask(todoListId, title)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        const task = res.data.data.item\r\n        const action = addTaskAC(task)\r\n        dispatch(action)\r\n        dispatch(setStatusAC('succeeded'))\r\n      } else {\r\n        if (res.data.messages.length) {\r\n          dispatch(setErrorAC(res.data.messages[0]))\r\n        } else {\r\n          dispatch(setErrorAC('Some error occurred'))\r\n        }\r\n        dispatch(setStatusAC('failed'))\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const updateTaskTC = (\r\n  taskId: string,\r\n  domainModel: UpdateDomainTaskModelType,\r\n  todoListId: string\r\n) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n  const state = getState()\r\n  const task = state.tasks[todoListId].find((t) => t.id === taskId)\r\n  if (!task) {\r\n    console.warn('task not found in the state')\r\n    return\r\n  }\r\n  let apiModel: UpdateTask = {\r\n    priority: task.priority,\r\n    status: task.status,\r\n    title: task.title,\r\n    deadline: task.deadline,\r\n    startDate: task.startDate,\r\n    description: task.description,\r\n    ...domainModel,\r\n  }\r\n  todoListApi\r\n    .updateTask(todoListId, taskId, apiModel)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        const action = updateTaskAC(taskId, domainModel, todoListId)\r\n        dispatch(action)\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n        //   if (res.data.messages.length) {\r\n        //     dispatch(setErrorAC(res.data.messages[0]))\r\n        //   } else {\r\n        //     dispatch(setErrorAC('Some error occurred'))\r\n        //   }\r\n        //   dispatch(setStatusAC('failed'))\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\n// types\r\ntype ActionsType =\r\n  | removeTaskACType\r\n  | addTaskACType\r\n  | AddTodoListACType\r\n  | RemoveTodoListACType\r\n  | setTodoListACType\r\n  | setTaskACType\r\n  | UpdateTaskACType\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType> //генерировать текстовые уникальные id\r\n}\r\n","import { useDispatch } from 'react-redux'\r\nimport React, { ChangeEvent, useCallback } from 'react'\r\nimport { Checkbox, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todoList-api'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { removeTaskTS, updateTaskTC } from '../../tasks-reducer'\r\n\r\ntype TaskPropsType = {\r\n  t: TaskType\r\n  todoListId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n  const dispatch = useDispatch()\r\n  // удаление таски\r\n  let onRemoveHandler = useCallback(() => {\r\n    const thunk = removeTaskTS(props.t.id, props.todoListId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  // let onRemoveHandler = () => dispatch(removeTaskAC(props.t.id, props.todoListId))\r\n  // let onRemoveHandler = useCallback(()=>props.removeTask(props.t.id, props.todoListId),[props.t.id, props.todoListId])\r\n\r\n  // контролируемый чекбокс\r\n  let onChangeStatusHandler = useCallback(\r\n    (event: ChangeEvent<HTMLInputElement>) => {\r\n      let newIsDoneValue = event.currentTarget.checked\r\n      let thunk = updateTaskTC(\r\n        props.t.id,\r\n        { status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New },\r\n        props.todoListId\r\n      )\r\n      dispatch(thunk)\r\n      // dispatch(changeTaskStatusAC(props.t.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId))\r\n      // props.changeTaskStatus(props.t.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n    },\r\n    [props.t.id, props.todoListId]\r\n  )\r\n\r\n  let onChangeTitleHandler = useCallback(\r\n    (newValue: string) => {\r\n      let thunk = updateTaskTC(\r\n        props.t.id,\r\n        { title: newValue },\r\n        props.todoListId\r\n      )\r\n      dispatch(thunk)\r\n      // dispatch(updateTaskAC(props.t.id, {title:newValue}, props.todoListId))\r\n      // props.changeTaskTitle(props.t.id, newValue, props.todoListId)\r\n    },\r\n    [props.t.id, props.todoListId]\r\n  )\r\n  //key обязательно\r\n  return (\r\n    <div\r\n      key={props.t.id}\r\n      className={props.t.status === TaskStatuses.New ? 'is-done' : ''}\r\n    >\r\n      <Checkbox\r\n        color={'primary'}\r\n        checked={props.t.status === TaskStatuses.Completed}\r\n        onChange={onChangeStatusHandler}\r\n      />\r\n      <EditableSpan title={props.t.title} onChange={onChangeTitleHandler} />\r\n\r\n      <IconButton onClick={onRemoveHandler}>\r\n        <Delete />\r\n      </IconButton>\r\n    </div>\r\n  )\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addTaskTS, fetchTasksTC } from '../tasks-reducer'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todoList-api'\r\nimport { FilterValueType, TodoListDomainType } from '../todolists-reducer'\r\nimport { AppRootStateType } from '../../../app/store'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\n\r\ntype PropsType = {\r\n  todoList: TodoListDomainType\r\n  changeFilter: (value: FilterValueType, todoListId: string) => void\r\n  changeTodoListTitle: (id: string, newTitle: string) => void\r\n  //   filter: FilterValueType\r\n  removeTodoList: (todoListId: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo((props: PropsType) => {\r\n  const dispatch = useDispatch()\r\n  const tasks = useSelector<AppRootStateType, Array<TaskType>>(\r\n    (state) => state.tasks[props.todoList.id]\r\n  )\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTasksTC(props.todoList.id)) //запрос тасок по id tl\r\n  }, [])\r\n\r\n  const addTask = useCallback((title: string) => {\r\n    //добавление новой таски\r\n    const thunk = addTaskTS(title, props.todoList.id)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  let onClickAllHandler = useCallback(\r\n    () => props.changeFilter('all', props.todoList.id),\r\n    [props.changeFilter, props.todoList.id]\r\n  ) // в одну строчку без {}\r\n  let onClickActiveHandler = useCallback(() => {\r\n    props.changeFilter('active', props.todoList.id)\r\n  }, [props.changeFilter, props.todoList.id])\r\n  let onClickCompletedHandler = useCallback(() => {\r\n    props.changeFilter('completed', props.todoList.id)\r\n  }, [props.changeFilter, props.todoList.id])\r\n\r\n  let removeTodoList = () => {\r\n    props.removeTodoList(props.todoList.id)\r\n  }\r\n  // function changeTitle(id: string, newTitle: string, todoListId: string) {\r\n  //     dispatch(changeTaskTitleAC(id, newTitle, todoListId))\r\n  // }\r\n  const changeTodoListTitle = useCallback(\r\n    (newTitle: string) => {\r\n      // dispatch(changeTaskTitleAC(props.id, newTitle, todoListId))\r\n      props.changeTodoListTitle(props.todoList.id, newTitle)\r\n    },\r\n    [props.todoList.id, props.changeTodoListTitle]\r\n  )\r\n\r\n  let taskForTodoList = tasks // берем из объекта tasks и достаем по id\r\n  if (props.todoList.filter === 'active') {\r\n    taskForTodoList = tasks.filter((t) => t.status === TaskStatuses.New)\r\n  }\r\n  if (props.todoList.filter === 'completed') {\r\n    taskForTodoList = tasks.filter((t) => t.status === TaskStatuses.Completed) //t.isDone === true\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditableSpan\r\n          title={props.todoList.title}\r\n          onChange={changeTodoListTitle}\r\n        />\r\n        {/*<button onClick={removeTodoList}>x</button>*/}\r\n        <IconButton\r\n          onClick={removeTodoList}\r\n          disabled={props.todoList.entityStatus === 'loading'}\r\n        >\r\n          <Delete />\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm\r\n        addItem={addTask}\r\n        disabled={props.todoList.entityStatus === 'loading'}\r\n      />\r\n      <div>\r\n        <div>\r\n          {taskForTodoList.map((t) => (\r\n            <Task t={t} todoListId={props.todoList.id} key={t.id} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <Button\r\n          color={'default'}\r\n          variant={props.todoList.filter === 'all' ? 'outlined' : 'text'}\r\n          onClick={onClickAllHandler}\r\n        >\r\n          All\r\n        </Button>\r\n        <Button\r\n          color={'primary'}\r\n          variant={props.todoList.filter === 'active' ? 'outlined' : 'text'}\r\n          onClick={onClickActiveHandler}\r\n        >\r\n          Active\r\n        </Button>\r\n        <Button\r\n          color={'secondary'}\r\n          variant={props.todoList.filter === 'completed' ? 'outlined' : 'text'}\r\n          onClick={onClickCompletedHandler}\r\n        >\r\n          Completed\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n  addTodoListTC,\r\n  changeTodoListFilterAC,\r\n  changeTodoListTitleTC,\r\n  fetchTodoListTC,\r\n  FilterValueType,\r\n  removeTodoListTC,\r\n  TodoListDomainType,\r\n} from './todolists-reducer'\r\nimport { Grid, Paper } from '@material-ui/core'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { TodoList } from './TodoList/TodoList'\r\nimport { TasksStateType } from './tasks-reducer'\r\n\r\nexport const TodoListList: React.FC = () => {\r\n  const dispatch = useDispatch()\r\n  const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(\r\n    (state) => state.todoLists\r\n  )\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(\r\n    (state) => state.tasks\r\n  )\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTodoListTC())\r\n  }, [])\r\n\r\n  const changeFilter = useCallback(\r\n    (value: FilterValueType, todoListId: string) => {\r\n      dispatch(changeTodoListFilterAC(value, todoListId)) //!!!!!\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const removeTodoList = useCallback(\r\n    (todoListId: string) => {\r\n      let thunk = removeTodoListTC(todoListId)\r\n      dispatch(thunk)\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const changeTodoListTitle = useCallback(\r\n    (todoListId: string, netTitle: string) => {\r\n      let thunk = changeTodoListTitleTC(todoListId, netTitle)\r\n      dispatch(thunk)\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const addTodoList = useCallback(\r\n    (title: string) => {\r\n      let thunk = addTodoListTC(title) //кэширование функции\r\n      dispatch(thunk)\r\n    },\r\n    [dispatch]\r\n  )\r\n  return (\r\n    <>\r\n      <Grid container style={{ padding: '20px' }}>\r\n        <AddItemForm addItem={addTodoList} />\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        {todoLists.map((tl) => {\r\n          let allTodolistTasks = tasks[tl.id]\r\n          return (\r\n            <Grid item>\r\n              <Paper style={{ padding: '10px' }}>\r\n                <TodoList\r\n                  key={tl.id}\r\n                  todoList={tl}\r\n                  // id={tl.id}\r\n                  // title={tl.title}\r\n                  changeFilter={changeFilter}\r\n                  // filter={tl.filter}\r\n                  removeTodoList={removeTodoList}\r\n                  changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          )\r\n        })}\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\nimport { makeStyles, Theme } from '@material-ui/core/styles'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { setErrorAC } from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\n// const useStyles = makeStyles((theme: Theme) => ({\r\n//     root: {\r\n//         width: '100%',\r\n//         '& > * + *': {\r\n//             marginTop: theme.spacing(2),\r\n//         },\r\n//     },\r\n// }));\r\n\r\nexport function ErrorSnackBar() {\r\n  // const classes = useStyles();\r\n  // const [open, setOpen] = React.useState(true);\r\n\r\n  // const handleClick = () => {\r\n  //     setOpen(true);\r\n  // };\r\n  const error = useSelector<AppRootStateType, string | null>(\r\n    (state) => state.app.error\r\n  )\r\n  const dispatch = useDispatch()\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return\r\n    }\r\n    dispatch(setErrorAC(null))\r\n    //setOpen(false);\r\n  }\r\n\r\n  const isOpen = error !== null\r\n  return (\r\n    // // <div className={classes.root}>\r\n    // //     <Button variant=\"outlined\" onClick={handleClick}>\r\n    // //         Open success snackbar\r\n    //     {/*</Button>*/}\r\n    <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n\r\n    // </div>\r\n  )\r\n}\r\n","\r\n\r\n\r\n// let initialState: TasksStateType = {}\r\n\r\nimport {authAPI, LoginParamsType} from \"../../../api/todoList-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setStatusAC} from \"../../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\r\n\r\n\r\nlet initialState  = {\r\n    isLoggedIn: false\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\":\r\n            return {\r\n                ...state, isLoggedIn: action.value\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\nexport type setIsLoggedInACType = ReturnType<typeof setIsLoggedInAC>\r\n\r\n\r\n// thunk\r\nexport const loginTC = (data: LoginParamsType) => (\r\n    dispatch: Dispatch\r\n) => {\r\n    dispatch(setStatusAC('loading')) //крутилка\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n       if (res.data.resultCode === 0){\r\n           dispatch(setIsLoggedInAC(true))\r\n           dispatch(setStatusAC('succeeded'))\r\n       }else {\r\n           handleServerAppError(res.data, dispatch)\r\n       }\r\n    })\r\n        .catch((error)=>{\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n\r\n// types\r\ntype ActionsType =\r\n     | setIsLoggedInACType\r\n\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n    let dispatch = useDispatch()\r\nlet isLoggedIn = useSelector<AppRootStateType, boolean>((state =>state.auth.isLoggedIn ))\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            // alert(JSON.stringify(values));\r\n            formik.resetForm()\r\n        },\r\n\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if ((values.password).length <= 2) {\r\n                errors.password = 'Invalid password '\r\n            }\r\n            return errors;\r\n        },\r\n\r\n\r\n    });\r\n\r\nif (isLoggedIn){                     // при успешной логинизации редирект на гс\r\n    return <Redirect to={'/'}/>\r\n}\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            // name={'password'}\r\n                            //для примера\r\n                             {...formik.getFieldProps('password')}\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.password}\r\n                            // onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography,\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodoListList} from '../features/TodoListsList/TodoListList'\r\nimport {ErrorSnackBar} from '../components/ErrorSnackBar/ErrorSnackBar'\r\nimport {useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {RequestStatusType} from './app-reducer'\r\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"../features/TodoListsList/Login/Login\";\r\n\r\nfunction App() {\r\n    let status = useSelector<AppRootStateType, RequestStatusType>(\r\n        (state) => state.app.status\r\n    )\r\n    return (\r\n        <BrowserRouter>\r\n        <div className=\"App\">\r\n            <ErrorSnackBar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">Todolist</Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                {/*<TodoListList/>*/}\r\n                <Switch>\r\n                <Route  path={'/login'} render={()=> <Login />}/>\r\n                <Route exact path={'/'} render={()=> <TodoListList/>}/>\r\n                <Route path={ '/404' } render={ () => <h1>404: PAGE NOT FOUND</h1> }/>\r\n                    {/*<Redirect from={'*'} to={'/login'}/>*/}\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport { todoListReducer } from '../features/TodoListsList/todolists-reducer'\r\nimport { tasksReducer } from '../features/TodoListsList/tasks-reducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/TodoListsList/Login/auth-reducer\";\r\n\r\n// import thunkMiddleware from 'state-thunk'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n  todoLists: todoListReducer,\r\n  tasks: tasksReducer,\r\n  app: appReducer,\r\n  auth: authReducer\r\n})\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware)) // applyMiddleware(thunkMiddleware)\r\n// определить автоматически тип всего объекта состояния\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// export type AppRootStateType = typeof store   типизация стора\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n          <App />\r\n      </Provider>\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}