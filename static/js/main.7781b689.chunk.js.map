{"version":3,"sources":["api/todoList-api.tsx","utils/error-utils.ts","features/TodoListsList/Login/auth-reducer.ts","app/app-reducer.ts","features/TodoListsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodoListsList/tasks-reducer.ts","features/TodoListsList/TodoList/Task/Task.tsx","features/TodoListsList/TodoList/TodoList.tsx","features/TodoListsList/TodoListList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/TodoListsList/Login/Login.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todoListApi","get","title","post","id","delete","put","todoListId","taskId","taskTitle","model","authAPI","data","handleServerAppError","dispatch","messages","length","setErrorAC","setStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","AppInitializedTC","then","res","resultCode","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","TextField","variant","onChange","event","currentTarget","label","helperText","IconButton","color","onClick","trim","AddBox","EditableSpan","props","console","log","editMode","setEditMode","onChangeTitleHandler","useCallback","e","onBlur","autoFocus","onDoubleClick","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","priority","deadline","startDate","description","action","updateTaskAC","catch","warn","Task","useDispatch","onRemoveHandler","thunk","removeTaskAC","onChangeStatusHandler","newIsDoneValue","checked","Completed","New","newValue","className","Checkbox","Delete","TodoList","useSelector","state","todoList","useEffect","items","todoListIs","addTask","item","addTaskTS","onClickAllHandler","changeFilter","onClickActiveHandler","onClickCompletedHandler","changeTodoListTitle","newTitle","taskForTodoList","filter","removeTodoList","entityStatus","map","Button","TodoListList","todoLists","auth","changeTodoListFilterAC","removeTodoListAC","removeTodoListTC","netTitle","changeTodoListTitleTC","addTodoList","addTodoListTC","Grid","container","style","padding","spacing","tl","Paper","to","Alert","elevation","ErrorSnackBar","app","handleClose","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","resetForm","validate","errors","test","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","render","exact","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7781b689.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst setting = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e0364a45-b776-45ce-a5e2-732ef20bc482',\r\n    },\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...setting,\r\n})\r\n\r\n/*\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n     withCredentials: true,\r\n    headers: {\r\n     'API-KEY': 'e66d6d23-ce52-4d6b-97de-dbd90e8d428f'\r\n    }\r\n})\r\n*/\r\nexport const todoListApi = {\r\n    getTodoList() {\r\n        return instance.get<Array<TodoListType>>('todo-lists')\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {\r\n            title: title,\r\n        })\r\n    },\r\n    deleteTodoList(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodoList(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n    },\r\n    getTasks(todoListId: string) {\r\n        let promise = instance.get<GetTasksResponse>(\r\n            `todo-lists/${todoListId}/tasks`\r\n        )\r\n        return promise\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(\r\n            `todo-lists/${todoListId}/tasks/${taskId}`\r\n        )\r\n    },\r\n    createTask(todoListId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(\r\n            `todo-lists/${todoListId}/tasks`,\r\n            {title: taskTitle}\r\n        )\r\n    },\r\n    updateTask(todoListId: string, taskId: string, model: UpdateTask) {\r\n        return instance.put<ResponseType<TaskType>>(\r\n            `todo-lists/${todoListId}/tasks/${taskId}`,\r\n            model\r\n        )\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType>(`auth/login`, data)\r\n    },\r\n    logout(){\r\n       return instance.delete<ResponseType>(`auth/login`)\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<{id: number; email: string; login: string}>>(`auth/me`)\r\n}\r\n}\r\n\r\n\r\n// types\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later,\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTask = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\n// type _CreateTodoListResponseType={\r\n//     resultCode: number\r\n//     messages: Array<string>             //string[]\r\n//     data: {\r\n//         item: TodoListType\r\n//     }\r\n// }\r\n// type DeleteUpdateTodoListResponseType={\r\n//     resultCode: number\r\n//     messages: Array<string>\r\n//     data: {}\r\n// }\r\n// type _UpdateTodoListResponseType={\r\n//     resultCode: number\r\n//     messages: Array<string>\r\n//     data: {}\r\n// }\r\n","import { Dispatch } from 'redux'\r\nimport {\r\n  setErrorAC,\r\n  setErrorACType,\r\n  setStatusAC,\r\n  setStatusACType,\r\n} from '../app/app-reducer'\r\nimport { ResponseType } from '../api/todoList-api'\r\nexport const handleServerAppError = <D>(\r\n  data: ResponseType<D>,\r\n  dispatch: Dispatch<setErrorACType | setStatusACType>\r\n) => {\r\n  if (data.messages.length) {\r\n    dispatch(setErrorAC(data.messages[0]))\r\n  } else {\r\n    dispatch(setErrorAC('Some error occurred'))\r\n  }\r\n  dispatch(setStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (\r\n  error: { message: string },\r\n  dispatch: Dispatch<setErrorACType | setStatusACType>\r\n) => {\r\n  dispatch(setErrorAC(error.message ? error.message : 'Some error'))\r\n  dispatch(setStatusAC('failed'))\r\n}\r\n","\r\n\r\n\r\n// let initialState: TasksStateType = {}\r\n\r\nimport {authAPI, LoginParamsType} from \"../../../api/todoList-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setStatusAC} from \"../../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\r\n\r\n\r\nlet initialState  = {\r\n    isLoggedIn: false\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\":\r\n            return {\r\n                ...state, isLoggedIn: action.value\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\nexport type setIsLoggedInACType = ReturnType<typeof setIsLoggedInAC>\r\n\r\n\r\n// thunk\r\nexport const loginTC = (data: LoginParamsType) => (\r\n    dispatch: Dispatch\r\n) => {\r\n    dispatch(setStatusAC('loading')) //крутилка\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n       if (res.data.resultCode === 0){\r\n           dispatch(setIsLoggedInAC(true))\r\n           dispatch(setStatusAC('succeeded'))\r\n       }else {\r\n           handleServerAppError(res.data, dispatch)\r\n       }\r\n    })\r\n        .catch((error)=>{\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC('loading')) //крутилка\r\n    authAPI.logout()\r\n        .then((res) => {\r\n       if (res.data.resultCode === 0){\r\n           dispatch(setIsLoggedInAC(false))\r\n           dispatch(setStatusAC('succeeded'))\r\n       }else {\r\n           handleServerAppError(res.data, dispatch)\r\n       }\r\n    })\r\n        .catch((error)=>{\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n\r\n// types\r\ntype ActionsType =\r\n     | setIsLoggedInACType\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todoList-api\";\r\nimport {setIsLoggedInAC} from \"../features/TodoListsList/Login/auth-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-APP-INITIALIZED\":\r\n            return {\r\n                ...state, isInitialized: action.value\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({type: 'APP/SET-APP-INITIALIZED', value} as const)\r\n\r\n// thunk\r\nexport const AppInitializedTC = (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then((res)=>{\r\n            if (res.data.resultCode === 0){\r\n                dispatch(setIsLoggedInAC(true))\r\n\r\n            }else {\r\n\r\n            }\r\n            dispatch(setAppInitializedAC(true))\r\n        })\r\n}\r\n\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    //если ошибка глобальна, сюда запишет текст ошибки\r\n    error: string | null\r\n    // true когда приложение проинициализировалось\r\n    isInitialized: boolean\r\n}\r\n\r\nexport type setErrorACType = ReturnType<typeof setErrorAC>\r\nexport type setStatusACType = ReturnType<typeof setStatusAC>\r\nexport type setAppInitializedACType = ReturnType<typeof setAppInitializedAC>\r\n\r\ntype ActionsType = setErrorACType\r\n    | setStatusACType\r\n    | setAppInitializedACType","import {Dispatch} from 'redux'\r\nimport {todoListApi, TodoListType} from '../../api/todoList-api'\r\nimport {\r\n    RequestStatusType, setErrorACType,\r\n    setStatusAC,\r\n    setStatusACType,\r\n} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n// let initialState: Array<TodoListType> = [\r\n//     {id: todoListId1, title: 'What to learn ', filter: 'all'},\r\n//     {id: todoListId2, title: 'What to learn ', filter: 'all'},\r\n// ]\r\n\r\nlet initialState: Array<TodoListDomainType> = []\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const todoListReducer = (\r\n    state: InitialStateType = initialState,\r\n    action: ActionsType\r\n): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter((tl) => tl.id != action.todoListId)\r\n        case 'ADD-TODOLIST':\r\n            return [\r\n                {...action.todoList, filter: 'all', entityStatus: 'idle'},\r\n                ...state,\r\n            ]\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map((tl) =>\r\n                tl.id === action.id ? {...tl, entityStatus: action.status} : tl\r\n            )\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map((tl) =>\r\n                tl.id === action.id ? {...tl, title: action.newTitle} : tl\r\n            )\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map((tl) =>\r\n                tl.id === action.todoListId ? {...tl, filter: action.filter} : tl\r\n            )\r\n        case 'SET-TODOLIST':\r\n            return action.todoList.map((tl) => ({\r\n                ...tl,\r\n                filter: 'all',\r\n                entityStatus: 'idle',\r\n            }))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const changeTodoListFilterAC = (\r\n    filter: FilterValueType,\r\n    todoListId: string\r\n) => ({type: 'CHANGE-TODOLIST-FILTER', filter, todoListId} as const)\r\nexport const removeTodoListAC = (todoListId: string) =>\r\n    ({type: 'REMOVE-TODOLIST', todoListId} as const)\r\nexport const changeTodoListEntityStatusAC = (\r\n    id: string,\r\n    status: RequestStatusType\r\n) => ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status} as const)\r\nexport const addTodoListAC = (todoList: TodoListType) =>\r\n    ({type: 'ADD-TODOLIST', todoList} as const)\r\nexport const setTodoListAC = (todoList: Array<TodoListType>) =>\r\n    ({type: 'SET-TODOLIST', todoList: todoList} as const)\r\nexport const changeTodoListTitleAC = (id: string, newTitle: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', id, newTitle} as const)\r\n\r\nexport type ChangeFilterACType = ReturnType<typeof changeTodoListFilterAC>\r\nexport type RemoveTodoListACType = ReturnType<typeof removeTodoListAC>\r\nexport type AddTodoListACType = ReturnType<typeof addTodoListAC>\r\nexport type ChangeTodoListTitleACType = ReturnType<typeof changeTodoListTitleAC>\r\nexport type setTodoListACType = ReturnType<typeof setTodoListAC>\r\nexport type changeTodoListEntityStatusACType = ReturnType<typeof changeTodoListEntityStatusAC>\r\n\r\n// thunk\r\nexport const fetchTodoListTC = () => {\r\n    return (dispatch: Dispatch<ActionsType | setStatusACType| setErrorACType >) => {\r\n        //?типизация dispatch для примера\r\n        dispatch(setStatusAC('loading')) //крутилка\r\n        todoListApi.getTodoList().then((res) => {\r\n            dispatch(setTodoListAC(res.data))\r\n            dispatch(setStatusAC('succeeded'))\r\n        })\r\n            .catch((error)=>{\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodoListTC = (todoListId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        dispatch(changeTodoListEntityStatusAC(todoListId, 'loading'))\r\n        todoListApi.deleteTodoList(todoListId).then((res) => {\r\n            dispatch(removeTodoListAC(todoListId))\r\n            dispatch(setStatusAC('succeeded'))\r\n        })\r\n    }\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        todoListApi.createTodoList(title)\r\n            .then((res) => {\r\n                dispatch(addTodoListAC(res.data.data.item))\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport const changeTodoListTitleTC = (todoListId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListApi.updateTodoList(todoListId, title)\r\n            .then((res) => {\r\n            dispatch(changeTodoListTitleAC(todoListId, title))\r\n        })\r\n            .catch((error)=>{\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n// types\r\nexport type FilterValueType = 'all' | 'active' | 'completed'\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValueType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ActionsType =\r\n    | ChangeFilterACType\r\n    | RemoveTodoListACType\r\n    | AddTodoListACType\r\n    | ChangeTodoListTitleACType\r\n    | setTodoListACType\r\n    | changeTodoListEntityStatusACType\r\n","import React, { ChangeEvent, useState } from 'react'\r\nimport { IconButton, TextField } from '@material-ui/core'\r\nimport { AddBox } from '@material-ui/icons'\r\n\r\nexport type AddItemFormPropsType = {\r\n  addItem: (title: string) => void\r\n  disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(\r\n  ({ addItem, disabled = false }: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    let onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n      // получаем данные из input\r\n      setTitle(event.currentTarget.value)\r\n      setError(null)\r\n    }\r\n    const addItemHandler = () => {\r\n      if (title.trim() !== '') {\r\n        //убранными с двух сторон пробелами (trim)\r\n        addItem(title)\r\n        setTitle('') //добавить таску\r\n      } else {\r\n        setError('Title is required')\r\n      }\r\n    }\r\n\r\n    // const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    //     if (error !== null) {\r\n    //         setError(null);\r\n    //     }\r\n    //     if (e.charCode === 13) {\r\n    //         addItem();\r\n    //     }\r\n    // }\r\n\r\n    // let onPressHandler = (event: KeyboardEvent<HTMLInputElement>)=>{\r\n    // if (event.charCode === 13){\r\n    //     props.addTask\r\n    // }\r\n    // }\r\n\r\n    return (\r\n      <div>\r\n        <TextField\r\n          variant={'outlined'}\r\n          value={title}\r\n          onChange={onChangeHandler}\r\n          label={'Title'}\r\n          helperText={error}\r\n          error={!!error}\r\n          disabled={disabled}\r\n        />\r\n        <IconButton\r\n          color={'primary'}\r\n          onClick={addItemHandler}\r\n          disabled={disabled}\r\n        >\r\n          <AddBox />\r\n        </IconButton>\r\n        {/*<Button variant={'contained'} color={'primary'} onClick={addTask}> +</Button>*/}\r\n        {/*<button onClick={addTask}> +</button>*/}\r\n        {/*{error &&*/}\r\n        {/*// <div className='error-message'> {error}</div>*/}\r\n        {/*}*/}\r\n      </div>\r\n    )\r\n  }\r\n)\r\n","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('edit')\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }, [])\r\n    return editMode\r\n        ? <TextField variant={'outlined'} value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode}\r\n                     autoFocus={true}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title} </span>\r\n})","\r\nimport {\r\n  AddTodoListACType,\r\n  RemoveTodoListACType,\r\n  setTodoListACType,\r\n} from './todolists-reducer'\r\nimport {\r\n  TaskPriorities,\r\n  TaskStatuses,\r\n  TaskType,\r\n  todoListApi,\r\n  UpdateTask,\r\n} from '../../api/todoList-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\n\r\nimport {\r\n  setErrorAC,\r\n  setErrorACType,\r\n  setStatusAC,\r\n  setStatusACType,\r\n} from '../../app/app-reducer'\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkError,\r\n} from '../../utils/error-utils'\r\n\r\n// export let todoListId1 = v1()\r\n// export let todoListId2 = v1()\r\n\r\n// let initialState: TasksStateType = {\r\n//     [todoListId1]: [\r\n//         {id: v1(), title: 'CSS', isDone: true},\r\n//         {id: v1(), title: 'React', isDone: false},\r\n//     ],\r\n//     [todoListId2]: [\r\n//         {id: v1(), title: 'CSS', isDone: true},\r\n//         {id: v1(), title: 'React', isDone: false},\r\n//     ]\r\n// }\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const tasksReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: ActionsType\r\n): TasksStateType => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TASK':\r\n      return {\r\n        ...state,\r\n        [action.todoListId]: state[action.todoListId].filter(\r\n          (t) => t.id !== action.taskId\r\n        ),\r\n      }\r\n    case 'ADD-TASK':\r\n      return {\r\n        ...state,\r\n        [action.task.todoListId]: [\r\n          action.task,\r\n          ...state[action.task.todoListId],\r\n        ],\r\n      }\r\n\r\n    case 'UPDATE-TASK':\r\n      return {\r\n        ...state,\r\n        [action.todoListId]: state[action.todoListId].map((t) =>\r\n          t.id === action.taskId ? { ...t, ...action.model } : t\r\n        ),\r\n      }\r\n    case 'ADD-TODOLIST': {\r\n      return {\r\n        ...state,\r\n        [action.todoList.id]: [],\r\n      }\r\n    }\r\n    case 'REMOVE-TODOLIST': {\r\n      const stateCopy = { ...state }\r\n      delete stateCopy[action.todoListId]\r\n      return stateCopy\r\n    }\r\n    case 'SET-TODOLIST': {\r\n      const stateCopy = { ...state }\r\n      action.todoList.forEach((tl) => {\r\n        stateCopy[tl.id] = []\r\n      })\r\n      return stateCopy\r\n    }\r\n    case 'SET-TASK':\r\n      return { ...state, [action.todoListIs]: action.tasks }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) =>\r\n  ({ type: 'REMOVE-TASK', taskId, todoListId } as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n  ({ type: 'ADD-TASK', task } as const)\r\nexport const updateTaskAC = (\r\n  taskId: string,\r\n  model: UpdateDomainTaskModelType,\r\n  todoListId: string\r\n) =>\r\n  ({\r\n    type: 'UPDATE-TASK',\r\n    taskId,\r\n    model,\r\n    todoListId,\r\n  } as const)\r\nexport const setTaskAC = (tasks: Array<TaskType>, todoListIs: string) =>\r\n  ({\r\n    type: 'SET-TASK',\r\n    tasks,\r\n    todoListIs,\r\n  } as const)\r\n\r\nexport type removeTaskACType = ReturnType<typeof removeTaskAC>\r\nexport type addTaskACType = ReturnType<typeof addTaskAC>\r\nexport type setTaskACType = ReturnType<typeof setTaskAC>\r\nexport type UpdateTaskACType = ReturnType<typeof updateTaskAC>\r\n\r\n// thunk\r\nexport const fetchTasksTC = (todoListId: string) => (\r\n  dispatch: Dispatch<ActionsType | setStatusACType>\r\n) => {\r\n  dispatch(setStatusAC('loading')) //крутилка\r\n  todoListApi.getTasks(todoListId).then((res) => {\r\n    dispatch(setTaskAC(res.data.items, todoListId))\r\n    dispatch(setStatusAC('succeeded'))\r\n  })\r\n}\r\n\r\nexport const removeTaskTS = (taskId: string, todoListId: string) => (\r\n  dispatch: Dispatch\r\n) => {\r\n  todoListApi.deleteTask(todoListId, taskId).then((res) => {\r\n    const action = removeTaskAC(taskId, todoListId)\r\n    dispatch(action)\r\n  })\r\n}\r\n\r\nexport const addTaskTS = (title: string, todoListId: string) => (\r\n  dispatch: Dispatch\r\n) => {\r\n  dispatch(setStatusAC('loading'))\r\n  todoListApi\r\n    .createTask(todoListId, title)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        const task = res.data.data.item\r\n        const action = addTaskAC(task)\r\n        dispatch(action)\r\n        dispatch(setStatusAC('succeeded'))\r\n      } else {\r\n        if (res.data.messages.length) {\r\n          dispatch(setErrorAC(res.data.messages[0]))\r\n        } else {\r\n          dispatch(setErrorAC('Some error occurred'))\r\n        }\r\n        dispatch(setStatusAC('failed'))\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const updateTaskTC = (\r\n  taskId: string,\r\n  domainModel: UpdateDomainTaskModelType,\r\n  todoListId: string\r\n) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n  const state = getState()\r\n  const task = state.tasks[todoListId].find((t) => t.id === taskId)\r\n  if (!task) {\r\n    console.warn('task not found in the state')\r\n    return\r\n  }\r\n  let apiModel: UpdateTask = {\r\n    priority: task.priority,\r\n    status: task.status,\r\n    title: task.title,\r\n    deadline: task.deadline,\r\n    startDate: task.startDate,\r\n    description: task.description,\r\n    ...domainModel,\r\n  }\r\n  todoListApi\r\n    .updateTask(todoListId, taskId, apiModel)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        const action = updateTaskAC(taskId, domainModel, todoListId)\r\n        dispatch(action)\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n        //   if (res.data.messages.length) {\r\n        //     dispatch(setErrorAC(res.data.messages[0]))\r\n        //   } else {\r\n        //     dispatch(setErrorAC('Some error occurred'))\r\n        //   }\r\n        //   dispatch(setStatusAC('failed'))\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\n// types\r\ntype ActionsType =\r\n  | removeTaskACType\r\n  | addTaskACType\r\n  | AddTodoListACType\r\n  | RemoveTodoListACType\r\n  | setTodoListACType\r\n  | setTaskACType\r\n  | UpdateTaskACType\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType> //генерировать текстовые уникальные id\r\n}\r\n","import { useDispatch } from 'react-redux'\r\nimport React, { ChangeEvent, useCallback } from 'react'\r\nimport { Checkbox, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todoList-api'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { removeTaskTS, updateTaskTC } from '../../tasks-reducer'\r\n\r\ntype TaskPropsType = {\r\n  t: TaskType\r\n  todoListId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n  const dispatch = useDispatch()\r\n  // удаление таски\r\n  let onRemoveHandler = useCallback(() => {\r\n    const thunk = removeTaskTS(props.t.id, props.todoListId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  // let onRemoveHandler = () => dispatch(removeTaskAC(props.t.id, props.todoListId))\r\n  // let onRemoveHandler = useCallback(()=>props.removeTask(props.t.id, props.todoListId),[props.t.id, props.todoListId])\r\n\r\n  // контролируемый чекбокс\r\n  let onChangeStatusHandler = useCallback(\r\n    (event: ChangeEvent<HTMLInputElement>) => {\r\n      let newIsDoneValue = event.currentTarget.checked\r\n      let thunk = updateTaskTC(\r\n        props.t.id,\r\n        { status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New },\r\n        props.todoListId\r\n      )\r\n      dispatch(thunk)\r\n      // dispatch(changeTaskStatusAC(props.t.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId))\r\n      // props.changeTaskStatus(props.t.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n    },\r\n    [props.t.id, props.todoListId]\r\n  )\r\n\r\n  let onChangeTitleHandler = useCallback(\r\n    (newValue: string) => {\r\n      let thunk = updateTaskTC(\r\n        props.t.id,\r\n        { title: newValue },\r\n        props.todoListId\r\n      )\r\n      dispatch(thunk)\r\n      // dispatch(updateTaskAC(props.t.id, {title:newValue}, props.todoListId))\r\n      // props.changeTaskTitle(props.t.id, newValue, props.todoListId)\r\n    },\r\n    [props.t.id, props.todoListId]\r\n  )\r\n  //key обязательно\r\n  return (\r\n    <div\r\n      key={props.t.id}\r\n      className={props.t.status === TaskStatuses.New ? 'is-done' : ''}\r\n    >\r\n      <Checkbox\r\n        color={'primary'}\r\n        checked={props.t.status === TaskStatuses.Completed}\r\n        onChange={onChangeStatusHandler}\r\n      />\r\n      <EditableSpan title={props.t.title} onChange={onChangeTitleHandler} />\r\n\r\n      <IconButton onClick={onRemoveHandler}>\r\n        <Delete />\r\n      </IconButton>\r\n    </div>\r\n  )\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addTaskTS, fetchTasksTC } from '../tasks-reducer'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todoList-api'\r\nimport { FilterValueType, TodoListDomainType } from '../todolists-reducer'\r\nimport { AppRootStateType } from '../../../app/store'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\n\r\ntype PropsType = {\r\n  todoList: TodoListDomainType\r\n  changeFilter: (value: FilterValueType, todoListId: string) => void\r\n  changeTodoListTitle: (id: string, newTitle: string) => void\r\n  //   filter: FilterValueType\r\n  removeTodoList: (todoListId: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo((props: PropsType) => {\r\n  const dispatch = useDispatch()\r\n  const tasks = useSelector<AppRootStateType, Array<TaskType>>(\r\n    (state) => state.tasks[props.todoList.id]\r\n  )\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTasksTC(props.todoList.id)) //запрос тасок по id tl\r\n  }, [])\r\n\r\n  const addTask = useCallback((title: string) => {\r\n    //добавление новой таски\r\n    const thunk = addTaskTS(title, props.todoList.id)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  let onClickAllHandler = useCallback(\r\n    () => props.changeFilter('all', props.todoList.id),\r\n    [props.changeFilter, props.todoList.id]\r\n  ) // в одну строчку без {}\r\n  let onClickActiveHandler = useCallback(() => {\r\n    props.changeFilter('active', props.todoList.id)\r\n  }, [props.changeFilter, props.todoList.id])\r\n  let onClickCompletedHandler = useCallback(() => {\r\n    props.changeFilter('completed', props.todoList.id)\r\n  }, [props.changeFilter, props.todoList.id])\r\n\r\n  let removeTodoList = () => {\r\n    props.removeTodoList(props.todoList.id)\r\n  }\r\n  // function changeTitle(id: string, newTitle: string, todoListId: string) {\r\n  //     dispatch(changeTaskTitleAC(id, newTitle, todoListId))\r\n  // }\r\n  const changeTodoListTitle = useCallback(\r\n    (newTitle: string) => {\r\n      // dispatch(changeTaskTitleAC(props.id, newTitle, todoListId))\r\n      props.changeTodoListTitle(props.todoList.id, newTitle)\r\n    },\r\n    [props.todoList.id, props.changeTodoListTitle]\r\n  )\r\n\r\n  let taskForTodoList = tasks // берем из объекта tasks и достаем по id\r\n  if (props.todoList.filter === 'active') {\r\n    taskForTodoList = tasks.filter((t) => t.status === TaskStatuses.New)\r\n  }\r\n  if (props.todoList.filter === 'completed') {\r\n    taskForTodoList = tasks.filter((t) => t.status === TaskStatuses.Completed) //t.isDone === true\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditableSpan\r\n          title={props.todoList.title}\r\n          onChange={changeTodoListTitle}\r\n        />\r\n        {/*<button onClick={removeTodoList}>x</button>*/}\r\n        <IconButton\r\n          onClick={removeTodoList}\r\n          disabled={props.todoList.entityStatus === 'loading'}\r\n        >\r\n          <Delete />\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm\r\n        addItem={addTask}\r\n        disabled={props.todoList.entityStatus === 'loading'}\r\n      />\r\n      <div>\r\n        <div>\r\n          {taskForTodoList.map((t) => (\r\n            <Task t={t} todoListId={props.todoList.id} key={t.id} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <Button\r\n          color={'default'}\r\n          variant={props.todoList.filter === 'all' ? 'outlined' : 'text'}\r\n          onClick={onClickAllHandler}\r\n        >\r\n          All\r\n        </Button>\r\n        <Button\r\n          color={'primary'}\r\n          variant={props.todoList.filter === 'active' ? 'outlined' : 'text'}\r\n          onClick={onClickActiveHandler}\r\n        >\r\n          Active\r\n        </Button>\r\n        <Button\r\n          color={'secondary'}\r\n          variant={props.todoList.filter === 'completed' ? 'outlined' : 'text'}\r\n          onClick={onClickCompletedHandler}\r\n        >\r\n          Completed\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n  addTodoListTC,\r\n  changeTodoListFilterAC,\r\n  changeTodoListTitleTC,\r\n  fetchTodoListTC,\r\n  FilterValueType,\r\n  removeTodoListTC,\r\n  TodoListDomainType,\r\n} from './todolists-reducer'\r\nimport { Grid, Paper } from '@material-ui/core'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { TodoList } from './TodoList/TodoList'\r\nimport { TasksStateType } from './tasks-reducer'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const TodoListList: React.FC = () => {\r\n  const dispatch = useDispatch()\r\n  const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(\r\n    (state) => state.todoLists\r\n  )\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(\r\n    (state) => state.tasks\r\n  )\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n   useEffect(()=>{\r\n       if (!isLoggedIn){\r\n           return\r\n       }\r\n   })\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTodoListTC())\r\n  }, [dispatch])\r\n\r\n  const changeFilter = useCallback(\r\n    (value: FilterValueType, todoListId: string) => {\r\n      dispatch(changeTodoListFilterAC(value, todoListId)) //!!!!!\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const removeTodoList = useCallback(\r\n    (todoListId: string) => {\r\n      let thunk = removeTodoListTC(todoListId)\r\n      dispatch(thunk)\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const changeTodoListTitle = useCallback(\r\n    (todoListId: string, netTitle: string) => {\r\n      let thunk = changeTodoListTitleTC(todoListId, netTitle)\r\n      dispatch(thunk)\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const addTodoList = useCallback(\r\n    (title: string) => {\r\n      let thunk = addTodoListTC(title) //кэширование функции\r\n      dispatch(thunk)\r\n    },\r\n    [dispatch]\r\n  )\r\n    if (!isLoggedIn){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n  return (\r\n    <>\r\n      <Grid container style={{ padding: '20px' }}>\r\n        <AddItemForm addItem={addTodoList} />\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        {todoLists.map((tl) => {\r\n          let allTodolistTasks = tasks[tl.id]\r\n          return (\r\n            <Grid item>\r\n              <Paper style={{ padding: '10px' }}>\r\n                <TodoList\r\n                  key={tl.id}\r\n                  todoList={tl}\r\n                  // id={tl.id}\r\n                  // title={tl.title}\r\n                  changeFilter={changeFilter}\r\n                  // filter={tl.filter}\r\n                  removeTodoList={removeTodoList}\r\n                  changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          )\r\n        })}\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\nimport { makeStyles, Theme } from '@material-ui/core/styles'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { setErrorAC } from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\n// const useStyles = makeStyles((theme: Theme) => ({\r\n//     root: {\r\n//         width: '100%',\r\n//         '& > * + *': {\r\n//             marginTop: theme.spacing(2),\r\n//         },\r\n//     },\r\n// }));\r\n\r\nexport function ErrorSnackBar() {\r\n  // const classes = useStyles();\r\n  // const [open, setOpen] = React.useState(true);\r\n\r\n  // const handleClick = () => {\r\n  //     setOpen(true);\r\n  // };\r\n  const error = useSelector<AppRootStateType, string | null>(\r\n    (state) => state.app.error\r\n  )\r\n  const dispatch = useDispatch()\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return\r\n    }\r\n    dispatch(setErrorAC(null))\r\n    //setOpen(false);\r\n  }\r\n\r\n  const isOpen = error !== null\r\n  return (\r\n    // // <div className={classes.root}>\r\n    // //     <Button variant=\"outlined\" onClick={handleClick}>\r\n    // //         Open success snackbar\r\n    //     {/*</Button>*/}\r\n    <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n\r\n    // </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n    let dispatch = useDispatch()\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>((state => state.auth.isLoggedIn))\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            // alert(JSON.stringify(values));\r\n            formik.resetForm()\r\n        },\r\n\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if ((values.password).length <= 2) {\r\n                errors.password = 'Invalid password '\r\n            }\r\n            return errors;\r\n        },\r\n\r\n\r\n    });\r\n\r\nif (isLoggedIn){                     // при успешной логинизации редирект на гс\r\n    return <Redirect to={'/'}/>\r\n}\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            // name={'password'}\r\n                            //для примера\r\n                             {...formik.getFieldProps('password')}\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.password}\r\n                            // onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button, CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography,\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodoListList} from '../features/TodoListsList/TodoListList'\r\nimport {ErrorSnackBar} from '../components/ErrorSnackBar/ErrorSnackBar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {AppInitializedTC, RequestStatusType} from './app-reducer'\r\nimport {BrowserRouter, HashRouter, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"../features/TodoListsList/Login/Login\";\r\nimport {logoutTC} from \"../features/TodoListsList/Login/auth-reducer\";\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n    let status = useSelector<AppRootStateType, RequestStatusType>(\r\n        (state) => state.app.status\r\n    )\r\n    let isInitialized = useSelector<AppRootStateType, boolean>((state =>state.app.isInitialized ))\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>((state =>state.auth.isLoggedIn ))\r\n    useEffect(()=>{\r\n        dispatch(AppInitializedTC)\r\n    },[dispatch])\r\n    const logoutHandler = useCallback(()=>{\r\n        dispatch(logoutTC())\r\n    },[dispatch])\r\n\r\n    if (!isInitialized){\r\n        return <CircularProgress />\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        // <BrowserRouter>\r\n        <HashRouter>\r\n        <div className=\"App\">\r\n            <ErrorSnackBar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">Todolist</Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                {/*<TodoListList/>*/}\r\n                <Switch>\r\n                <Route  path={'/login'} render={()=> <Login />}/>\r\n                <Route exact path={'/'} render={()=> <TodoListList/>}/>\r\n                <Route path={ '/404' } render={ () => <h1>404: PAGE NOT FOUND</h1> }/>\r\n                    {/*<Redirect from={'*'} to={'/login'}/>*/}\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n        </HashRouter>\r\n        // </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport { todoListReducer } from '../features/TodoListsList/todolists-reducer'\r\nimport { tasksReducer } from '../features/TodoListsList/tasks-reducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/TodoListsList/Login/auth-reducer\";\r\n\r\n// import thunkMiddleware from 'state-thunk'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n  todoLists: todoListReducer,\r\n  tasks: tasksReducer,\r\n  app: appReducer,\r\n  auth: authReducer\r\n})\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware)) // applyMiddleware(thunkMiddleware)\r\n// определить автоматически тип всего объекта состояния\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// export type AppRootStateType = typeof store   типизация стора\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n          <App />\r\n      </Provider>\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}