{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","redux/tasks-reducer.ts","TodoList.tsx","redux/todolists-reducer.ts","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","TextField","variant","value","onChange","event","currentTarget","label","helperText","IconButton","color","onClick","trim","addItem","AddBox","EditableSpan","editMode","setEditMode","e","onBlur","autoFocus","onDoubleClick","initialState","changeTaskTitleAC","taskId","newTitle","todoListId","type","TodoList","dispatch","useDispatch","tasks","useSelector","state","id","taskForTodoList","filter","t","isDone","changeTodoListTitle","removeTodoList","Delete","addTaskAC","map","className","Checkbox","checked","newIsDoneValue","newValue","Button","changeFilter","App","todoLists","changeTodoListFilterAC","action","removeTodoListAC","netTitle","changeTodoListTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","v1","addTodoListAC","spacing","tl","item","Paper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","todiList","find","todoList","stateCopy","filteredTasks","newTask","task","tasks1","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a113e96.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {Add, AddBox, Title} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string ) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    let onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {  // получаем данные из input\r\n        setTitle(event.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title)\r\n            setTitle('')                              //добавить таску{\r\n        } else {\r\n            setError('ошибка')\r\n        }\r\n    }\r\n    return (\r\n\r\n        <div>\r\n            <TextField variant={'outlined'}\r\n                       value={title}\r\n                   onChange={onChangeHandler}\r\n                       label={'Title'}\r\n                       helperText={error}\r\n                       error={!!error}\r\n            />\r\n            <IconButton color={'primary'} onClick={addTask}>\r\n            <AddBox/>\r\n            </IconButton>\r\n            {/*<Button variant={'contained'} color={'primary'} onClick={addTask}> +</Button>*/}\r\n            {/*<button onClick={addTask}> +</button>*/}\r\n            {/*{error &&*/}\r\n            {/*// <div className='error-message'> {error}</div>*/}\r\n            {/*}*/}\r\n        </div>\r\n\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string)=>void\r\n\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n    const activateEditMode=()=>{\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n\r\n    }\r\n    const activateViewMode=()=>{\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n  const  onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return editMode\r\n        ? <TextField variant={'outlined'} value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus={true}/>\r\n        : <span onDoubleClick={activateEditMode} >{props.title} </span>\r\n}","import {v1} from \"uuid\";\r\nimport {TasksStateType} from \"../App\";\r\nimport {addTodoListACType, removeTodoListACType} from \"./todolists-reducer\";\r\n\r\n// export let todoListId1 = v1()\r\n// export let todoListId2 = v1()\r\n\r\n// let initialState: TasksStateType = {\r\n//     [todoListId1]: [\r\n//         {id: v1(), title: 'CSS', isDone: true},\r\n//         {id: v1(), title: 'React', isDone: false},\r\n//     ],\r\n//     [todoListId2]: [\r\n//         {id: v1(), title: 'CSS', isDone: true},\r\n//         {id: v1(), title: 'React', isDone: false},\r\n//     ]\r\n// }\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const tasksReducer = (state: InitialStateType = initialState, action: ActionsType): TasksStateType => {\r\n    debugger\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            const stateCopy = {...state}     // делаем копию стейта\r\n            let tasks = state[action.todoListId]                                                       // удаление таски\r\n            let filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todoListId] = filteredTasks\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = {...state}\r\n            let newTask = {id: v1(), title: action.title, isDone: false}\r\n            //достаем нужный массив по todoListId\r\n            let tasks = state[action.todoListId]\r\n            // let newTasks = [newTask, ...tasks]\r\n            stateCopy[action.todoListId] = [newTask, ...tasks]\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            const stateCopy = {...state}\r\n            let tasks = state[action.todoListId]                                                    //чекбокс\r\n            let task = tasks.find(t => t.id === action.taskId)\r\n            if (task) {   // псевдоистина\r\n                task.isDone = action.isDone\r\n                // tasks[todoListId] = task\r\n            }\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            const stateCopy = {...state}\r\n            //достаем нужный массив по todoListId\r\n            let tasks1 = state[action.todoListId]\r\n            //найдем нужную таску\r\n            let task = tasks1.find(t => t.id === action.taskId)\r\n            //изменим таску если она нашлась\r\n            if (task) {                                      // псевдоистина\r\n                task.title = action.newTitle\r\n                // tasks[todoListId] = task\r\n                //засетаем в стейт копию объекта, что бы React отреагировал перерисовкой\r\n            }\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoListId] = []\r\n            return stateCopy\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todoListId]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => ({type: 'REMOVE-TASK', taskId, todoListId} as const)\r\nexport const addTaskAC = (title: string, todoListId: string) => ({type: 'ADD-TASK', title, todoListId} as const)\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todoListId: string) => ({\r\n    type: 'CHANGE-TASK-STATUS',\r\n    taskId,\r\n    isDone,\r\n    todoListId\r\n} as const)\r\nexport const changeTaskTitleAC = (taskId: string, newTitle: string, todoListId: string) => ({\r\n    type: 'CHANGE-TASK-TITLE',\r\n    taskId,\r\n    newTitle,\r\n    todoListId\r\n} as const)\r\n\r\n\r\nexport type removeTaskACType = ReturnType<typeof removeTaskAC>\r\nexport type addTaskACType = ReturnType<typeof addTaskAC>\r\nexport type changeTaskStatusACType = ReturnType<typeof changeTaskStatusAC>\r\nexport type changeTaskTitleACType = ReturnType<typeof changeTaskTitleAC>\r\n\r\ntype ActionsType = removeTaskACType\r\n    | addTaskACType\r\n    | changeTaskStatusACType\r\n    | changeTaskTitleACType\r\n    | addTodoListACType\r\n    | removeTodoListACType\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValueType, TasksStateType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./redux/tasks-reducer\";\r\n// import {Delete} from '@material-ui/icons'\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    // tasks: Array<TaskType>\r\n    // removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValueType, todoListId: string) => void\r\n    // addTask: (title: string, todoListId: string) => void\r\n    // changeTaskStatus: (id: string, isDone: boolean, todoListId: string) => void\r\n    // changeTaskTitle: (id: string, newValue: string, todoListId: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValueType | string\r\n    removeTodoList: (todoListId: string) => void\r\n}\r\n\r\n\r\nexport function TodoList(props: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\r\n\r\n    // function removeTask(id: string, todoListId: string) {      //удаление таски\r\n    //     dispatch(removeTaskAC(id, todoListId))\r\n    // }\r\n    // function addTask(title: string, todoListId: string) {                //добавление новой таски\r\n    //     dispatch(addTaskAC(title, todoListId))\r\n    // }\r\n    // function changeStatus(id: string, isDone: boolean, todoListId: string) {               //чекбокс\r\n    //     dispatch(changeTaskStatusAC(id, isDone, todoListId))\r\n    // }\r\n    function changeTitle(id: string, newTitle: string, todoListId: string) {\r\n        dispatch(changeTaskTitleAC(id, newTitle, todoListId))\r\n    }\r\n\r\n    // let [title, setTitle] = useState('')\r\n    // let [error, setError] = useState<string | null>(null)\r\n    // let onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {  // получаем данные из input\r\n    //     setTitle(event.currentTarget.value)\r\n    //     setError(null)\r\n    // }\r\n\r\n// let onPressHandler = (event: KeyboardEvent<HTMLInputElement>)=>{\r\n// if (event.charCode === 13){\r\n//     props.addTask\r\n// }\r\n// }\r\n\r\n    let onClickAllHandler = () => props.changeFilter('all', props.id)  // в одну строчку без {}\r\n\r\n    let onClickActiveHandler = () => {\r\n        props.changeFilter('active', props.id)\r\n    }\r\n    let onClickCompletedHandler = () => {\r\n        props.changeFilter('completed', props.id)\r\n    }\r\n\r\n    // const addTask = () => {\r\n    //     if (title.trim() !== '') {                    //убранными с двух сторон пробелами (trim)\r\n    //         props.addTask(title, props.id)\r\n    //         setTitle('')                              //добавить таску{\r\n    //     } else {\r\n    //         setError('ошибка')\r\n    //     }\r\n    // }\r\n    let removeTodoList = () => {\r\n        props.removeTodoList(props.id)\r\n    }\r\n\r\n    const changeTodoListTitle = (newTitle: string) => {\r\n        // dispatch(changeTaskTitleAC(props.id, newTitle, todoListId))\r\n        props.changeTodoListTitle(props.id, newTitle)\r\n    }\r\n\r\n\r\n\r\n    let taskForTodoList = tasks     // берем из объекта tasks и достаем по id\r\n    if (props.filter === 'active') {\r\n        taskForTodoList = tasks.filter(t => !t.isDone)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        taskForTodoList = tasks.filter(t => t.isDone)    //t.isDone === true\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={changeTodoListTitle}/>\r\n                {/*<button onClick={removeTodoList}>x</button>*/}\r\n                <IconButton onClick={removeTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={(title)=>{ dispatch(addTaskAC(title, props.id))}}/>\r\n            {/*<div>*/}\r\n            {/*    <input value={title}*/}\r\n            {/*           onChange={onChangeHandler}*/}\r\n            {/*           className={error ? 'error' : ''}*/}\r\n            {/*    />*/}\r\n            {/*    <button onClick={addTask}> +</button>*/}\r\n            {/*    {error &&*/}\r\n            {/*    <div className='error-message'> {error}</div>*/}\r\n            {/*    }*/}\r\n            {/*</div>*/}\r\n            <div>\r\n                <div>\r\n                    {\r\n                        taskForTodoList.map(t => {\r\n                            let onRemoveHandler = () => dispatch(removeTaskAC(t.id, props.id))\r\n                                // props.removeTask(t.id, props.id)\r\n                            let onChangeStatusHandler = (event: ChangeEvent<HTMLInputElement>) => {  //  контролируемый чекбокс\r\n                                let newIsDoneValue = event.currentTarget.checked\r\n                                dispatch(changeTaskStatusAC(t.id, newIsDoneValue, props.id))\r\n                                // props.changeTaskStatus(t.id, newIsDoneValue, props.id)\r\n                            }\r\n                            let onChangeTitleHandler = (newValue: string) => {\r\n                                dispatch(changeTaskTitleAC(t.id, newValue, props.id))\r\n                                //  контролируемый чекбокс\r\n                                // props.changeTaskTitle(t.id, newValue, props.id)\r\n                            }\r\n                            //key обязательно\r\n                            return <div key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                                {/*<input type={'checkbox'} checked={t.isDone} onChange={onChangeStatusHandler}/>*/}\r\n                                <Checkbox color={'primary'} checked={t.isDone} onChange={onChangeStatusHandler}/>\r\n                                <EditableSpan title={t.title} onChange={onChangeTitleHandler}/>\r\n                                {/*<span>{t.title}</span>*/}\r\n                                {/*<button onClick={onRemoveHandler}>x</button>*/}\r\n                                <IconButton onClick={onRemoveHandler}>\r\n                                    <Delete/>\r\n                                </IconButton>\r\n                            </div>\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <Button color={'default'} variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                        onClick={onClickAllHandler}>All\r\n                </Button>\r\n                <Button color={'primary'} variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                        onClick={onClickActiveHandler}>Active\r\n                </Button>\r\n                <Button color={'secondary'} variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                        onClick={onClickCompletedHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {FilterValueType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\n// let initialState: Array<TodoListType> = [\r\n//     {id: todoListId1, title: 'What to learn ', filter: 'all'},\r\n//     {id: todoListId2, title: 'What to learn ', filter: 'all'},\r\n// ]\r\n\r\nlet initialState: Array<TodoListType> = []\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const todoListReducer = (state: InitialStateType = initialState, action: ActionsType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            let todiList = state.find(tl => tl.id === action.todoListId)\r\n            if (todiList) {\r\n                todiList.filter = action.value\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.todoListId)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return [...state, {id: action.todoListId, title: action.title, filter: 'all'}]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            let todoList = state.find((tl => tl.id === action.id))\r\n            if (todoList) {\r\n                todoList.title = action.netTitle\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const changeTodoListFilterAC = (value: FilterValueType, todoListId: string) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    value,\r\n    todoListId\r\n} as const)\r\nexport const removeTodoListAC = (todoListId: string) => ({type: 'REMOVE-TODOLIST', todoListId} as const)\r\nexport const addTodoListAC = (title: string) => ({type: 'ADD-TODOLIST', title: title, todoListId: v1()} as const)\r\nexport const changeTodoListTitleAC = (id: string, netTitle: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    netTitle\r\n} as const)\r\n\r\n\r\nexport type changeFilterACType = ReturnType<typeof changeTodoListFilterAC>\r\nexport type removeTodoListACType = ReturnType<typeof removeTodoListAC>\r\nexport type addTodoListACType = ReturnType<typeof addTodoListAC>\r\nexport type changeTodoListTitleACType = ReturnType<typeof changeTodoListTitleAC>\r\n\r\ntype ActionsType = changeFilterACType\r\n    | removeTodoListACType\r\n    | addTodoListACType\r\n    | changeTodoListTitleACType\r\n","import React from 'react';\nimport './App.css';\nimport {TaskType, TodoList} from \"./TodoList\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport {\n    addTodoListAC,\n    changeTodoListFilterAC,\n    changeTodoListTitleAC,\n    removeTodoListAC,\n} from \"./redux/todolists-reducer\";\nimport {AppRootStateType} from \"./store/store\";\n\n\n//генерировать текстовые уникальные id\n\n\nexport type FilterValueType = 'all' | 'active' | 'completed'\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: FilterValueType\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nfunction App() {\n\n    const dispatch = useDispatch()\n\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todoLists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n\n    function changeFilter(value: FilterValueType, todoListId: string) {\n        dispatch(changeTodoListFilterAC(value, todoListId))                     //!!!!!\n    }\n\n\n\n    function removeTodoList(todoListId: string) {\n        let action = removeTodoListAC(todoListId)\n        dispatch(action)\n    }\n\n    function changeTodoListTitle(id: string, netTitle: string) {\n        dispatch(changeTodoListTitleAC(id, netTitle))\n    }\n\n    function addTodoList(title: string) {\n        dispatch(addTodoListAC(title))\n    }\n\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        Todolist\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: \"20px\"}}>\n                    <AddItemForm addItem={addTodoList}/>\n                </Grid>\n                <Grid container spacing={3}>\n                    {\n                        todoLists.map((tl) => {\n\n                            return <Grid item>\n                                <Paper style={{padding: \"10px\"}}>\n                                    <TodoList\n                                        key={tl.id}\n                                        id={tl.id}\n                                        title={tl.title}\n                                        changeFilter={changeFilter}\n                                        filter={tl.filter}\n                                        removeTodoList={removeTodoList}\n                                        changeTodoListTitle={changeTodoListTitle}\n                                    />\n                                </Paper>\n                            </Grid>\n                        })\n                    }\n                    {/*<TodoList title={' What to learn'}*/}\n                    {/*          tasks={taskForTodoList}*/}\n                    {/*          removeTask={removeTask}*/}\n                    {/*          changeFilter={changeFilter}*/}\n                    {/*          addTask={addTask}*/}\n                    {/*          changeTaskStatus={changeStatus}*/}\n                    {/*          filter={filter}*/}\n                    {/*/>*/}\n                </Grid>\n            </Container>\n        </div>\n\n    );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, createStore} from 'redux'\r\nimport {todoListReducer} from \"../redux/todolists-reducer\";\r\nimport {tasksReducer} from \"../redux/tasks-reducer\";\r\n\r\n// import thunkMiddleware from 'redux-thunk'\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListReducer,\r\n    tasks: tasksReducer\r\n\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);  // applyMiddleware(thunkMiddleware)\r\n// определить автоматически тип всего объекта состояния\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// export type AppRootStateType = typeof store   типизация стора\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}