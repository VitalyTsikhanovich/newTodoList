{"version":3,"sources":["api/todoList-api.tsx","redux/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","redux/tasks-reducer.ts","features/TodoListsList/TodoList/Task/Task.tsx","features/TodoListsList/TodoList/TodoList.tsx","features/TodoListsList/TodoListList.tsx","app/App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todoListApi","get","title","post","id","delete","put","todoListId","taskId","taskTitle","model","initialState","AddItemForm","React","memo","props","useState","setTitle","error","setError","TextField","variant","value","onChange","event","currentTarget","label","helperText","IconButton","color","onClick","trim","addItem","AddBox","EditableSpan","console","log","editMode","setEditMode","onChangeTitleHandler","useCallback","e","onBlur","autoFocus","onDoubleClick","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","apiModel","priority","status","deadline","startDate","description","then","res","action","type","updateTaskAC","warn","Task","useDispatch","onRemoveHandler","thunk","removeTaskAC","onChangeStatusHandler","newIsDoneValue","checked","Completed","New","newValue","className","Checkbox","Delete","TodoList","useSelector","state","useEffect","data","items","todoListIs","addTask","item","addTaskTS","onClickAllHandler","changeFilter","onClickActiveHandler","onClickCompletedHandler","changeTodoListTitle","newTitle","taskForTodoList","filter","removeTodoList","map","Button","TodoListList","todoLists","todoList","changeTodoListFilterAC","removeTodoListAC","removeTodoListTC","netTitle","changeTodoListTitleTC","addTodoList","addTodoListTC","Grid","container","style","padding","spacing","tl","Paper","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":";mHA+DYA,EAMAC,E,6IA5DNC,E,OAAWC,EAAMC,OAAN,aACbC,QAAS,iDARG,CACZC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2CAkBNC,EAAc,WAGnB,OADcN,EAASO,IAAyB,eAF3CD,EAAc,SAKRE,GACX,OAAOR,EAASS,KAA2C,aAAc,CAACD,MAAOA,KAN5EF,EAAc,SAQRI,GACX,OAAOV,EAASW,OAAT,qBAA4CD,KAT9CJ,EAAc,SAWRI,EAAYF,GACvB,OAAOR,EAASY,IAAT,qBAAyCF,GAAM,CAACF,MAAOA,KAZzDF,EAAc,SAcdO,GAEL,OADcb,EAASO,IAAT,qBAA6CM,EAA7C,YAfTP,EAAc,SAkBZO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KAnBlER,EAAc,SAqBZO,EAAoBE,GAC3B,OAAOf,EAASS,KAAT,qBAA4DI,EAA5D,UAAgF,CAACL,MAAOO,KAtB1FT,EAAc,SAwBZO,EAAoBC,EAAiBE,GAC5C,OAAOhB,EAASY,IAAT,qBAAmDC,EAAnD,kBAAuEC,GAAUE,K,SAepFlB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KC5DZ,IAAIkB,EAA0C,G,mDCDjCC,EAAcC,IAAMC,MAAK,SAACC,GAAgC,IAAD,EAE1CC,mBAAS,IAFiC,mBAE7Dd,EAF6D,KAEtDe,EAFsD,OAG1CD,mBAAwB,MAHkB,mBAG7DE,EAH6D,KAGtDC,EAHsD,KAgClE,OAEI,gCACI,cAACC,EAAA,EAAD,CAAWC,QAAS,WACTC,MAAOpB,EACXqB,SAjCO,SAACC,GACnBP,EAASO,EAAMC,cAAcH,OAC7BH,EAAS,OAgCMO,MAAO,QACPC,WAAYT,EACZA,QAASA,IAEpB,cAACU,EAAA,EAAD,CAAYC,MAAO,UAAWC,QAlCtB,WACS,KAAjB5B,EAAM6B,QACNhB,EAAMiB,QAAQ9B,GACde,EAAS,KAETE,EAAS,sBA6BT,SACA,cAACc,EAAA,EAAD,YC1CCC,EAAerB,IAAMC,MAAK,SAACC,GACpCoB,QAAQC,IAAI,QADyD,MAEvCpB,oBAAS,GAF8B,mBAEhEqB,EAFgE,KAEtDC,EAFsD,OAG7CtB,mBAAS,IAHoC,mBAGhEd,EAHgE,KAGzDe,EAHyD,KAa/DsB,EAAuBC,uBAAY,SAACC,GACtCxB,EAASwB,EAAEhB,cAAcH,SAC1B,IACH,OAAOe,EACD,cAACjB,EAAA,EAAD,CAAWC,QAAS,WAAYC,MAAOpB,EAAOqB,SAAUgB,EAAsBG,OAR3D,WACrBJ,GAAY,GACZvB,EAAMQ,SAASrB,IAOFyC,WAAW,IACtB,uBAAMC,cAfa,WACrBN,GAAY,GACZrB,EAASF,EAAMb,QAab,UAAwCa,EAAMb,MAA9C,U,iBCRNS,EAA+B,GA+FtBkC,EAAe,SAACrC,EAAgBsC,EAAwCvC,GAAzD,OACxB,SAACwC,EAAoBC,GACjB,IACMC,EADQD,IACKE,MAAM3C,GAAY4C,MAAK,SAAAC,GAAC,OAAIA,EAAEhD,KAAOI,KACxD,GAAKyC,EAAL,CAIA,IAAII,EAAoB,aACpBC,SAAUL,EAAKK,SACfC,OAAQN,EAAKM,OACbrD,MAAO+C,EAAK/C,MACZsD,SAAUP,EAAKO,SACfC,UAAWR,EAAKQ,UAChBC,YAAaT,EAAKS,aACfZ,GAEP9C,EAAuBO,EAAYC,EAAQ6C,GACtCM,MAAK,SAACC,GACH,IAAMC,EA7DM,SAACrD,EAAgBE,EAAkCH,GAAnD,MAA2E,CACnGuD,KAAM,cACNtD,SACAE,QACAH,cAyD2BwD,CAAavD,EAAQsC,EAAavC,GACjDwC,EAASc,WAfb1B,QAAQ6B,KAAK,iC,SC3GZC,EAAOpD,IAAMC,MAAK,SAACC,GAC5B,IAAMgC,EAAWmB,cAEbC,EAAkB3B,uBAAY,WAC9B,IDiFqBhC,EAAgBD,ECjF/B6D,GDiFe5D,ECjFMO,EAAMqC,EAAEhD,GDiFEG,ECjFEQ,EAAMR,WDiFe,SAACwC,GACjE/C,EAAuBO,EAAYC,GAC9BmD,MAAK,SAACC,GACH,IAAMC,EA9BU,SAACrD,EAAgBD,GAAjB,MAAyC,CAACuD,KAAM,cAAetD,SAAQD,cA8BxE8D,CAAa7D,EAAQD,GACpCwC,EAASc,QCpFbd,EAASqB,KAEV,IAMCE,EAAwB9B,uBAAY,SAAChB,GACrC,IAAI+C,EAAiB/C,EAAMC,cAAc+C,QACrCJ,EAAQvB,EAAa9B,EAAMqC,EAAEhD,GAAI,CAACmD,OAAQgB,EAAiB/E,EAAaiF,UAAYjF,EAAakF,KAAM3D,EAAMR,YACjHwC,EAASqB,KAGV,CAACrD,EAAMqC,EAAEhD,GAAIW,EAAMR,aAGlBgC,EAAuBC,uBAAY,SAACmC,GACpC,IAAIP,EAAQvB,EAAa9B,EAAMqC,EAAEhD,GAAI,CAACF,MAAOyE,GAAW5D,EAAMR,YAC9DwC,EAASqB,KAGV,CAACrD,EAAMqC,EAAEhD,GAAIW,EAAMR,aAEtB,OAAO,sBAAsBqE,UAAW7D,EAAMqC,EAAEG,SAAW/D,EAAakF,IAAM,UAAY,GAAnF,UAEH,cAACG,EAAA,EAAD,CAAUhD,MAAO,UAAW2C,QAASzD,EAAMqC,EAAEG,SAAW/D,EAAaiF,UAC3DlD,SAAU+C,IACpB,cAACpC,EAAD,CAAchC,MAAOa,EAAMqC,EAAElD,MAAOqB,SAAUgB,IAG9C,cAACX,EAAA,EAAD,CAAYE,QAASqC,EAArB,SACI,cAACW,EAAA,EAAD,QARS/D,EAAMqC,EAAEhD,OCfhB2E,EAAWlE,IAAMC,MAAK,SAACC,GAChC,IAAMgC,EAAWmB,cACXhB,EAAQ8B,aAA+C,SAAAC,GAAK,OAAIA,EAAM/B,MAAMnC,EAAMX,OAExF8E,qBAAU,WF4Dc,IAAC3E,EE3DrBwC,GF2DqBxC,EE3DCQ,EAAMX,GF2DgB,SAAC2C,GACjD/C,EAAqBO,GAChBoD,MAAK,SAACC,GACHb,EAf8D,CACtEe,KAAM,WACNZ,MAa2BU,EAAIuB,KAAKC,MAZpCC,WAY2C9E,YE7DxC,IAEH,IAAM+E,EAAU9C,uBAAY,SAAEtC,GAC1B,IAAMkE,EFsEW,SAAClE,EAAeK,GAAhB,OAAuC,SAACwC,GAC7D/C,EAAuBO,EAAYL,GAC9ByD,MAAK,SAACC,GACH,IACMC,EAtC4B,CAACC,KAAM,WAAYb,KAqCxCW,EAAIuB,KAAKA,KAAKI,MAE3BxC,EAASc,OE3EC2B,CAAUtF,EAAOa,EAAMX,IACrC2C,EAASqB,KACV,IAICqB,EAAoBjD,uBAAY,kBAAMzB,EAAM2E,aAAa,MAAO3E,EAAMX,MAAK,CAACW,EAAM2E,aAAc3E,EAAMX,KACtGuF,EAAuBnD,uBAAY,WAAOzB,EAAM2E,aAAa,SAAU3E,EAAMX,MAAM,CAACW,EAAM2E,aAAc3E,EAAMX,KAC9GwF,EAA0BpD,uBAAY,WAAOzB,EAAM2E,aAAa,YAAa3E,EAAMX,MAAM,CAACW,EAAM2E,aAAc3E,EAAMX,KASlHyF,EAAsBrD,uBAAY,SAACsD,GAErC/E,EAAM8E,oBAAoB9E,EAAMX,GAAI0F,KACrC,CAAC/E,EAAMX,GAAIW,EAAM8E,sBAGhBE,EAAkB7C,EAStB,MARqB,WAAjBnC,EAAMiF,SACND,EAAkB7C,EAAM8C,QAAO,SAAA5C,GAAC,OAAIA,EAAEG,SAAS/D,EAAakF,QAE3C,cAAjB3D,EAAMiF,SACND,EAAkB7C,EAAM8C,QAAO,SAAA5C,GAAC,OAAIA,EAAEG,SAAS/D,EAAaiF,cAK5D,gCACI,+BAAI,cAACvC,EAAD,CAAchC,MAAOa,EAAMb,MAAOqB,SAAUsE,IAE5C,cAACjE,EAAA,EAAD,CAAYE,QAzBH,WACjBf,EAAMkF,eAAelF,EAAMX,KAwBnB,SACI,cAAC0E,EAAA,EAAD,SAGR,cAAClE,EAAD,CAAaoB,QAASsD,IACtB,8BACI,8BAEQS,EAAgBG,KAAI,SAAA9C,GAAC,OACrB,cAACa,EAAD,CAAMb,EAAGA,EAAG7C,WAAYQ,EAAMX,IAASgD,EAAEhD,WAMrD,gCACI,cAAC+F,EAAA,EAAD,CAAQtE,MAAO,UAAWR,QAA0B,QAAjBN,EAAMiF,OAAmB,WAAa,OACjElE,QAAS2D,EADjB,iBAGA,cAACU,EAAA,EAAD,CAAQtE,MAAO,UAAWR,QAA0B,WAAjBN,EAAMiF,OAAsB,WAAa,OACpElE,QAAS6D,EADjB,oBAGA,cAACQ,EAAA,EAAD,CAAQtE,MAAO,YAAaR,QAA0B,cAAjBN,EAAMiF,OAAyB,WAAa,OACzElE,QAAS8D,EADjB,gCC7EHQ,EAAyB,WAClC,IAAMrD,EAAWmB,cACXmC,EAAYrB,aAAyD,SAAAC,GAAK,OAAIA,EAAMoB,aACpFnD,EAAQ8B,aAA8C,SAAAC,GAAK,OAAIA,EAAM/B,SAG3EgC,qBAAU,WACNnC,GNoBG,SAACA,GACJ/C,IACK2D,MAAK,SAACC,GACHb,EAdiD,CAACe,KAAM,eAAgBwC,SAcjD1C,EAAIuB,eMtBpC,IAGH,IAAMO,EAAelD,uBAAY,SAAClB,EAAwBf,GACtDwC,ENC8B,SAACiD,EAAyBzF,GAA1B,MAAkD,CAACuD,KAAM,yBAA0BkC,SAAQzF,cMDhHgG,CAAuBjF,EAAOf,MACxC,CAACwC,IAGEkD,EAAiBzD,uBAAY,SAACjC,GAChC,IAAI6D,ENkBoB,SAAE7D,GAC9B,OAAO,SAACwC,GACJ/C,EAA2BO,GACtBoD,MAAK,SAACC,GACHb,EAzBgB,SAACxC,GAAD,MAAyB,CAACuD,KAAM,kBAAmBvD,cAyB1DiG,CAAiBjG,QMtBtBkG,CAAiBlG,GAC7BwC,EAASqB,KACV,CAACrB,IAEE8C,EAAsBrD,uBAAY,SAACjC,EAAoBmG,GACzD,IAAItC,EN+ByB,SAAE7D,EAAoBL,GACvD,OAAO,SAAC6C,GACJ/C,EAA2BO,EAAYL,GAClCyD,MAAK,SAACC,GACHb,EAxCwD,CAACe,KAAM,wBAAyB1D,GAwCzDG,EAxC6DuF,SAwCjD5F,QMnCvCyG,CAAsBpG,EAAYmG,GAC9C3D,EAASqB,KACV,CAACrB,IAEE6D,EAAcpE,uBAAY,SAACtC,GAC7B,IAAIkE,ENiBiB,SAAElE,GAC3B,OAAO,SAAC6C,GACJ/C,EAA2BE,GACtByD,MAAK,SAACC,GACHb,EAjC0C,CAACe,KAAM,eAAgBwC,SAiC1C1C,EAAIuB,KAAKA,KAAKI,WMrBjCsB,CAAc3G,GAC1B6C,EAASqB,KACV,CAACrB,IACJ,OAAO,qCACH,cAAC+D,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAACC,QAAS,QAAjC,SACI,cAACrG,EAAD,CAAaoB,QAAS4E,MAE1B,cAACE,EAAA,EAAD,CAAMC,WAAS,EAACG,QAAS,EAAzB,SAEQb,EAAUH,KAAI,SAACiB,GACYjE,EAAMiE,EAAG/G,IAChC,OAAO,cAAC0G,EAAA,EAAD,CAAMvB,MAAI,EAAV,SACH,cAAC6B,EAAA,EAAD,CAAOJ,MAAO,CAACC,QAAS,QAAxB,SACI,cAAClC,EAAD,CAEI3E,GAAI+G,EAAG/G,GACPF,MAAOiH,EAAGjH,MACVwF,aAAcA,EACdM,OAAQmB,EAAGnB,OACXC,eAAgBA,EAChBJ,oBAAqBA,GANhBsB,EAAG/G,iBCnBzBiH,MAxBf,WAGI,OACI,sBAAKzC,UAAU,MAAf,UACI,cAAC0C,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,WACI,cAAC5F,EAAA,EAAD,CAAY6F,KAAK,QAAQ5F,MAAM,UAAU6F,aAAW,OAApD,SACI,cAACC,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAYvG,QAAQ,KAApB,sBAGA,cAAC8E,EAAA,EAAD,CAAQtE,MAAM,UAAd,wBAGR,cAACgG,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,cAAC,EAAD,UClBDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBtE,MAAK,YAAkD,IAA/CuE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gBCCRO,EAAcC,YAAgB,CAChCnC,UTC2B,WAA6F,IAA5FpB,EAA2F,uDAAjEtE,EAAckD,EAAmD,uCACvH,OAAQA,EAAOC,MACX,IAAK,kBACD,OAAOmB,EAAMe,QAAO,SAAAmB,GAAE,OAAIA,EAAG/G,IAAMyD,EAAOtD,cAC9C,IAAK,eACD,MAAM,CAAN,2BAAYsD,EAAOyC,UAAnB,IAA6BN,OAAQ,SAArC,mBAAgDf,IACpD,IAAK,wBACD,OAAOA,EAAMiB,KAAI,SAAAiB,GAAE,OAAGA,EAAG/G,KAAOyD,EAAOzD,GAAjB,2BAA0B+G,GAA1B,IAA8BjH,MAAO2D,EAAOiC,WAAYqB,KAClF,IAAK,yBACD,OAAOlC,EAAMiB,KAAI,SAAAiB,GAAE,OAAGA,EAAG/G,KAAMyD,EAAOtD,WAAhB,2BAAkC4G,GAAlC,IAAsCnB,OAAQnC,EAAOmC,SAASmB,KACxF,IAAK,eACD,OAAOtD,EAAOyC,SAASJ,KAAI,SAAAiB,GAAE,kCAAOA,GAAP,IAAWnB,OAAQ,WACpD,QACI,OAAOf,ISbf/B,MNawB,WAAkF,IAAjF+B,EAAgF,uDAAtDtE,EAAckD,EAAwC,uCAEzG,OAAQA,EAAOC,MACX,IAAK,cACD,OAAO,2BACAmB,GADP,kBAEKpB,EAAOtD,WAAa0E,EAAMpB,EAAOtD,YAAYyF,QAAO,SAAA5C,GAAC,OAAIA,EAAEhD,KAAOyD,EAAOrD,YAElF,IAAK,WACD,OAAO,2BACAyE,GADP,kBAEKpB,EAAOZ,KAAK1C,WAFjB,CAE+BsD,EAAOZ,MAFtC,mBAE+CgC,EAAMpB,EAAOZ,KAAK1C,gBAGrE,IAAK,cACD,OAAO,2BACA0E,GADP,kBAEKpB,EAAOtD,WAAa0E,EAAMpB,EAAOtD,YAAY2F,KAAI,SAAA9C,GAAC,OAAIA,EAAEhD,KAAOyD,EAAOrD,OAAhB,2BAA6B4C,GAAMS,EAAOnD,OAAS0C,OAElH,IAAK,eACD,OAAO,2BACA6B,GADP,kBAEKpB,EAAOyC,SAASlG,GAAK,KAG9B,IAAK,kBACD,IAAMqI,EAAS,eAAOxD,GAEtB,cADOwD,EAAU5E,EAAOtD,YACjBkI,EAEX,IAAK,eACD,IAAMA,EAAS,eAAOxD,GAItB,OAHApB,EAAOyC,SAASoC,SAAQ,SAAAvB,GACpBsB,EAAUtB,EAAG/G,IAAM,MAEhBqI,EAEX,IAAK,WACD,OAAO,2BAAIxD,GAAX,kBACKpB,EAAOwB,WAAaxB,EAAOX,QAEpC,QACI,OAAO+B,MMnDN0D,EAAQC,YAAYL,EAAaM,YAAgBC,MAS9DC,OAAOJ,MAAQA,ECjBfK,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACI,cAAC,EAAD,QAIRQ,SAASC,eAAe,SAM1BrB,K","file":"static/js/main.083da0d9.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst setting = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '7c015d6f-f277-4c3f-8d68-e545362e26fc'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...setting\r\n})\r\n\r\n/*\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n     withCredentials: true,\r\n    headers: {\r\n     'API-KEY': 'e66d6d23-ce52-4d6b-97de-dbd90e8d428f'\r\n    }\r\n})\r\n*/\r\nexport const todoListApi = {\r\n    getTodoList() {\r\n        let promise = instance.get<Array<TodoListType>>('todo-lists')\r\n        return promise\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title})\r\n    },\r\n    deleteTodoList(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodoList(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n    },\r\n    getTasks(todoListId: string) {\r\n        let promise = instance.get<GetTasksResponse>(`todo-lists/${todoListId}/tasks`)\r\n        return promise\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todoListId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todoListId}/tasks`, {title: taskTitle})\r\n    },\r\n    updateTask(todoListId: string, taskId: string,  model:UpdateTask ) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todoListId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n// types\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses{\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTask={\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}\r\n\r\n// type _CreateTodoListResponseType={\r\n//     resultCode: number\r\n//     messages: Array<string>             //string[]\r\n//     data: {\r\n//         item: TodoListType\r\n//     }\r\n// }\r\n// type DeleteUpdateTodoListResponseType={\r\n//     resultCode: number\r\n//     messages: Array<string>\r\n//     data: {}\r\n// }\r\n// type _UpdateTodoListResponseType={\r\n//     resultCode: number\r\n//     messages: Array<string>\r\n//     data: {}\r\n// }","import {Dispatch} from \"redux\";\r\nimport {todoListApi, TodoListType} from \"../api/todoList-api\";\r\n\r\n\r\n// let initialState: Array<TodoListType> = [\r\n//     {id: todoListId1, title: 'What to learn ', filter: 'all'},\r\n//     {id: todoListId2, title: 'What to learn ', filter: 'all'},\r\n// ]\r\n\r\nlet initialState: Array<TodoListDomainType> = []\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const todoListReducer = (state: InitialStateType = initialState, action: ActionsType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.todoListId)\r\n        case \"ADD-TODOLIST\":\r\n            return [{...action.todoList, filter: 'all'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl=> tl.id === action.id ? {...tl, title: action.newTitle} : tl)\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tl=> tl.id ===action.todoListId ? { ...tl, filter: action.filter}: tl)\r\n        case \"SET-TODOLIST\":\r\n            return action.todoList.map(tl=>({...tl, filter: 'all'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const changeTodoListFilterAC = (filter: FilterValueType, todoListId: string) => ({type: 'CHANGE-TODOLIST-FILTER', filter, todoListId} as const)\r\nexport const removeTodoListAC = (todoListId: string) => ({type: 'REMOVE-TODOLIST', todoListId} as const)\r\nexport const addTodoListAC = (todoList: TodoListType) => ({type: 'ADD-TODOLIST', todoList} as const)\r\nexport const setTodoListAC = (todoList: Array<TodoListType>) => ({type: 'SET-TODOLIST', todoList: todoList} as const)\r\nexport const changeTodoListTitleAC = (id: string, newTitle: string) => ({type: 'CHANGE-TODOLIST-TITLE', id, newTitle} as const)\r\n\r\nexport type ChangeFilterACType = ReturnType<typeof changeTodoListFilterAC>\r\nexport type RemoveTodoListACType = ReturnType<typeof removeTodoListAC>\r\nexport type AddTodoListACType = ReturnType<typeof addTodoListAC>\r\nexport type ChangeTodoListTitleACType = ReturnType<typeof changeTodoListTitleAC>\r\nexport type setTodoListACType = ReturnType<typeof setTodoListAC>\r\n\r\n// thunk\r\nexport const fetchTodoListTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {             //типизация dispatch для примера\r\n        todoListApi.getTodoList()\r\n            .then((res) => {\r\n                dispatch(setTodoListAC(res.data))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodoListTC = ( todoListId: string,) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListApi.deleteTodoList(todoListId)\r\n            .then((res) => {\r\n                dispatch(removeTodoListAC(todoListId))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTodoListTC = ( title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListApi.createTodoList(title)\r\n            .then((res) => {\r\n                dispatch(addTodoListAC(res.data.data.item))\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTodoListTitleTC = ( todoListId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListApi.updateTodoList(todoListId, title)\r\n            .then((res) => {\r\n                dispatch(changeTodoListTitleAC(todoListId, title))\r\n            })\r\n    }\r\n}\r\n// types\r\nexport type FilterValueType = 'all' | 'active' | 'completed'\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValueType\r\n}\r\ntype ActionsType =\r\n    | ChangeFilterACType\r\n    | RemoveTodoListACType\r\n    | AddTodoListACType\r\n    | ChangeTodoListTitleACType\r\n    | setTodoListACType","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {Add, AddBox, Title} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string ) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) =>{\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    let onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {  // получаем данные из input\r\n        setTitle(event.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {                           //убранными с двух сторон пробелами (trim)\r\n            props.addItem(title)\r\n            setTitle('')                              //добавить таску{\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    // const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    //     if (error !== null) {\r\n    //         setError(null);\r\n    //     }\r\n    //     if (e.charCode === 13) {\r\n    //         addItem();\r\n    //     }\r\n    // }\r\n\r\n    // let onPressHandler = (event: KeyboardEvent<HTMLInputElement>)=>{\r\n// if (event.charCode === 13){\r\n//     props.addTask\r\n// }\r\n// }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <TextField variant={'outlined'}\r\n                       value={title}\r\n                   onChange={onChangeHandler}\r\n                       label={'Title'}\r\n                       helperText={error}\r\n                       error={!!error}\r\n            />\r\n            <IconButton color={'primary'} onClick={addTask}>\r\n            <AddBox/>\r\n            </IconButton>\r\n            {/*<Button variant={'contained'} color={'primary'} onClick={addTask}> +</Button>*/}\r\n            {/*<button onClick={addTask}> +</button>*/}\r\n            {/*{error &&*/}\r\n            {/*// <div className='error-message'> {error}</div>*/}\r\n            {/*}*/}\r\n        </div>\r\n\r\n    )\r\n})","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('edit')\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }, [])\r\n    return editMode\r\n        ? <TextField variant={'outlined'} value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode}\r\n                     autoFocus={true}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title} </span>\r\n})","import {TasksStateType} from \"../app/App\";\r\nimport {AddTodoListACType, RemoveTodoListACType, setTodoListACType} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todoListApi, UpdateTask} from \"../api/todoList-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../store/store\";\r\n\r\n// export let todoListId1 = v1()\r\n// export let todoListId2 = v1()\r\n\r\n// let initialState: TasksStateType = {\r\n//     [todoListId1]: [\r\n//         {id: v1(), title: 'CSS', isDone: true},\r\n//         {id: v1(), title: 'React', isDone: false},\r\n//     ],\r\n//     [todoListId2]: [\r\n//         {id: v1(), title: 'CSS', isDone: true},\r\n//         {id: v1(), title: 'React', isDone: false},\r\n//     ]\r\n// }\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const tasksReducer = (state: InitialStateType = initialState, action: ActionsType): TasksStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case \"ADD-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n\r\n        case \"UPDATE-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.todoList.id]: []\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todoListId]\r\n            return stateCopy\r\n        }\r\n        case \"SET-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            action.todoList.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASK\":\r\n            return {...state,\r\n                [action.todoListIs]: action.tasks\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => ({type: 'REMOVE-TASK', taskId, todoListId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    taskId,\r\n    model,\r\n    todoListId\r\n} as const)\r\nexport const setTaskAC = (tasks: Array<TaskType>, todoListIs: string) => ({\r\n    type: 'SET-TASK',\r\n    tasks,\r\n    todoListIs\r\n} as const)\r\n\r\nexport type removeTaskACType = ReturnType<typeof removeTaskAC>\r\nexport type addTaskACType = ReturnType<typeof addTaskAC>\r\nexport type setTaskACType = ReturnType<typeof setTaskAC>\r\nexport type UpdateTaskACType = ReturnType<typeof updateTaskAC>\r\n\r\n// thunk\r\nexport const fetchTasksTC = (todoListId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todoListApi.getTasks(todoListId)\r\n        .then((res) => {\r\n            dispatch(setTaskAC(res.data.items, todoListId))\r\n        })\r\n}\r\n\r\nexport const removeTaskTS = (taskId: string, todoListId: string) => (dispatch: Dispatch) => {\r\n    todoListApi.deleteTask(todoListId, taskId)\r\n        .then((res) => {\r\n            const action = removeTaskAC(taskId, todoListId)\r\n            dispatch(action)\r\n        })\r\n}\r\n\r\nexport const addTaskTS = (title: string, todoListId: string) => (dispatch: Dispatch) => {\r\n    todoListApi.createTask(todoListId, title)\r\n        .then((res) => {\r\n            const task = res.data.data.item\r\n            const action = addTaskAC(task)\r\n            dispatch(action)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todoListId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todoListId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        let apiModel: UpdateTask = {\r\n            priority: task.priority,\r\n            status: task.status,\r\n            title: task.title,\r\n            deadline: task.deadline,\r\n            startDate: task.startDate,\r\n            description: task.description,\r\n            ...domainModel\r\n        }\r\n        todoListApi.updateTask(todoListId, taskId, apiModel)\r\n            .then((res) => {\r\n                const action = updateTaskAC(taskId, domainModel, todoListId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n\r\n// types\r\ntype ActionsType = removeTaskACType\r\n    | addTaskACType\r\n    | AddTodoListACType\r\n    | RemoveTodoListACType\r\n    | setTodoListACType\r\n    | setTaskACType\r\n    | UpdateTaskACType\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}","import {useDispatch} from \"react-redux\";\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todoList-api\";\r\nimport { removeTaskTS, updateTaskTC} from \"../../../../redux/tasks-reducer\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    t: TaskType\r\n    todoListId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    let onRemoveHandler = useCallback(() => {                //удаление таски\r\n        const thunk = removeTaskTS(props.t.id, props.todoListId);\r\n        dispatch(thunk);\r\n\r\n    }, [])\r\n\r\n    // let onRemoveHandler = () => dispatch(removeTaskAC(props.t.id, props.todoListId))\r\n    // let onRemoveHandler = useCallback(()=>props.removeTask(props.t.id, props.todoListId),[props.t.id, props.todoListId])\r\n\r\n\r\n    let onChangeStatusHandler = useCallback((event: ChangeEvent<HTMLInputElement>) => {  //  контролируемый чекбокс\r\n        let newIsDoneValue = event.currentTarget.checked\r\n        let thunk = updateTaskTC(props.t.id, {status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New}, props.todoListId)\r\n        dispatch(thunk)\r\n        // dispatch(changeTaskStatusAC(props.t.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId))\r\n        // props.changeTaskStatus(props.t.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n    }, [props.t.id, props.todoListId])\r\n\r\n\r\n    let onChangeTitleHandler = useCallback((newValue: string) => {\r\n        let thunk = updateTaskTC(props.t.id, {title: newValue}, props.todoListId)\r\n        dispatch(thunk)\r\n        // dispatch(updateTaskAC(props.t.id, {title:newValue}, props.todoListId))\r\n        // props.changeTaskTitle(props.t.id, newValue, props.todoListId)\r\n    }, [props.t.id, props.todoListId])\r\n    //key обязательно\r\n    return <div key={props.t.id} className={props.t.status === TaskStatuses.New ? 'is-done' : ''}>\r\n\r\n        <Checkbox color={'primary'} checked={props.t.status === TaskStatuses.Completed}\r\n                  onChange={onChangeStatusHandler}/>\r\n        <EditableSpan title={props.t.title} onChange={onChangeTitleHandler}/>\r\n\r\n\r\n        <IconButton onClick={onRemoveHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    addTaskTS,\r\n    fetchTasksTC,\r\n} from \"../../../redux/tasks-reducer\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todoList-api\";\r\nimport {FilterValueType, TodoListDomainType} from \"../../../redux/todolists-reducer\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    changeFilter: (value: FilterValueType, todoListId: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValueType\r\n    removeTodoList: (todoListId: string) => void\r\n}\r\n\r\n\r\nexport const TodoList = React.memo((props: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))  //запрос тасок по id tl\r\n    }, [])\r\n\r\n    const addTask = useCallback(( title: string)=> {    //добавление новой таски\r\n        const thunk = addTaskTS(title, props.id )\r\n        dispatch(thunk)\r\n    }, []);\r\n\r\n\r\n\r\n    let onClickAllHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])  // в одну строчку без {}\r\n    let onClickActiveHandler = useCallback(() => {props.changeFilter('active', props.id)}, [props.changeFilter, props.id])\r\n    let onClickCompletedHandler = useCallback(() => {props.changeFilter('completed', props.id)}, [props.changeFilter, props.id])\r\n\r\n\r\n    let removeTodoList = () => {\r\n        props.removeTodoList(props.id)\r\n    }\r\n    // function changeTitle(id: string, newTitle: string, todoListId: string) {\r\n    //     dispatch(changeTaskTitleAC(id, newTitle, todoListId))\r\n    // }\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        // dispatch(changeTaskTitleAC(props.id, newTitle, todoListId))\r\n        props.changeTodoListTitle(props.id, newTitle)\r\n    }, [props.id, props.changeTodoListTitle])\r\n\r\n\r\n    let taskForTodoList = tasks     // берем из объекта tasks и достаем по id\r\n    if (props.filter === 'active') {\r\n        taskForTodoList = tasks.filter(t => t.status===TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        taskForTodoList = tasks.filter(t => t.status===TaskStatuses.Completed)    //t.isDone === true\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={changeTodoListTitle}/>\r\n                {/*<button onClick={removeTodoList}>x</button>*/}\r\n                <IconButton onClick={removeTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                <div>\r\n                    {\r\n                        taskForTodoList.map(t =>\r\n                        <Task t={t} todoListId={props.id} key={t.id}\r\n                        />\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <Button color={'default'} variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                        onClick={onClickAllHandler}>All\r\n                </Button>\r\n                <Button color={'primary'} variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                        onClick={onClickActiveHandler}>Active\r\n                </Button>\r\n                <Button color={'secondary'} variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                        onClick={onClickCompletedHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {\r\n    addTodoListTC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodoListTC,\r\n    FilterValueType,\r\n    removeTodoListTC,\r\n    TodoListDomainType\r\n} from \"../../redux/todolists-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {TodoList} from \"./TodoList/TodoList\";\r\nimport {TasksStateType} from \"../../app/App\";\r\n\r\nexport const TodoListList: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodoListTC())\r\n    }, [])\r\n\r\n\r\n    const changeFilter = useCallback((value: FilterValueType, todoListId: string) => {\r\n        dispatch(changeTodoListFilterAC(value, todoListId))                     //!!!!!\r\n    }, [dispatch])\r\n\r\n\r\n    const removeTodoList = useCallback((todoListId: string) => {\r\n        let thunk = removeTodoListTC(todoListId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((todoListId: string, netTitle: string) => {\r\n        let thunk = changeTodoListTitleTC(todoListId, netTitle)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        let thunk = addTodoListTC(title)                                 //кэширование функции\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todoLists.map((tl) => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n                    return <Grid item>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <TodoList\r\n                                key={tl.id}\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                changeFilter={changeFilter}\r\n                                filter={tl.filter}\r\n                                removeTodoList={removeTodoList}\r\n                                changeTodoListTitle={changeTodoListTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\nimport './App.css';\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {TaskType} from \"../api/todoList-api\";\nimport {TodoListList} from \"../features/TodoListsList/TodoListList\";\n\n\n//генерировать текстовые уникальные id\n\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>,\n}\n\nfunction App() {\n\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        Todolist\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <TodoListList/>\n            </Container>\n        </div>\n\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {todoListReducer} from \"../redux/todolists-reducer\";\r\nimport {tasksReducer} from \"../redux/tasks-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\n// import thunkMiddleware from 'redux-thunk'\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListReducer,\r\n    tasks: tasksReducer,\r\n\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));  // applyMiddleware(thunkMiddleware)\r\n// определить автоматически тип всего объекта состояния\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// export type AppRootStateType = typeof store   типизация стора\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}