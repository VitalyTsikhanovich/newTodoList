{"version":3,"sources":["api/todoList-api.tsx","AddItemForm.tsx","EditableSpan.tsx","redux/tasks-reducer.ts","Task.tsx","TodoList.tsx","redux/todolists-reducer.ts","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","TextField","variant","value","onChange","event","currentTarget","label","helperText","IconButton","color","onClick","trim","addItem","AddBox","EditableSpan","console","log","editMode","setEditMode","onChangeTitleHandler","useCallback","e","onBlur","autoFocus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todoListApi","get","post","id","delete","put","todoListId","taskId","taskTitle","model","initialState","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","apiModel","priority","status","deadline","startDate","description","then","res","action","type","updateTaskAC","warn","Task","useDispatch","onRemoveHandler","thunk","removeTaskAC","onChangeStatusHandler","newIsDoneValue","checked","Completed","New","newValue","className","Checkbox","Delete","TodoList","useSelector","state","useEffect","data","items","todoListIs","addTask","item","addTaskTS","onClickAllHandler","changeFilter","onClickActiveHandler","onClickCompletedHandler","changeTodoListTitle","newTitle","taskForTodoList","filter","removeTodoList","map","Button","App","todoLists","todoList","changeTodoListFilterAC","removeTodoListAC","removeTodoListTC","netTitle","changeTodoListTitleTC","addTodoList","addTodoListTC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","Paper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","newTodoList","todiList","stateCopy","filteredTasks","newTask","newTasks","todolistTasks","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97e04303.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n\r\n\r\nconst setting = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '7c015d6f-f277-4c3f-8d68-e545362e26fc'\r\n    }\r\n}\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...setting                                                    // withCredentials: true,\r\n    //headers: {\r\n    //  'API-KEY': 'e66d6d23-ce52-4d6b-97de-dbd90e8d428f'\r\n    // }\r\n})\r\n\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\n// type _CreateTodoListResponseType={\r\n//     resultCode: number\r\n//     messages: Array<string>             //string[]\r\n//     data: {\r\n//         item: TodoListType\r\n//     }\r\n// }\r\n// type DeleteUpdateTodoListResponseType={\r\n//     resultCode: number\r\n//     messages: Array<string>\r\n//     data: {}\r\n// }\r\n// type _UpdateTodoListResponseType={\r\n//     resultCode: number\r\n//     messages: Array<string>\r\n//     data: {}\r\n// }\r\n\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses{\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTask={\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}\r\n\r\n\r\nexport const todoListApi = {\r\n    getTodoList() {\r\n        let promise = instance.get<Array<TodoListType>>('todo-lists')\r\n        return promise\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title})\r\n    },\r\n    deleteTodoList(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodoList(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n    },\r\n    getTasks(todoListId: string) {\r\n        let promise = instance.get<GetTasksResponse>(`todo-lists/${todoListId}/tasks`)\r\n        return promise\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todoListId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todoListId}/tasks`, {title: taskTitle})\r\n    },\r\n    updateTask(todoListId: string, taskId: string,  model:UpdateTask ) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todoListId}/tasks/${taskId}`, model)\r\n    }\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {Add, AddBox, Title} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string ) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) =>{\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    let onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {  // получаем данные из input\r\n        setTitle(event.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {                           //убранными с двух сторон пробелами (trim)\r\n            props.addItem(title)\r\n            setTitle('')                              //добавить таску{\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    // const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    //     if (error !== null) {\r\n    //         setError(null);\r\n    //     }\r\n    //     if (e.charCode === 13) {\r\n    //         addItem();\r\n    //     }\r\n    // }\r\n\r\n    // let onPressHandler = (event: KeyboardEvent<HTMLInputElement>)=>{\r\n// if (event.charCode === 13){\r\n//     props.addTask\r\n// }\r\n// }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <TextField variant={'outlined'}\r\n                       value={title}\r\n                   onChange={onChangeHandler}\r\n                       label={'Title'}\r\n                       helperText={error}\r\n                       error={!!error}\r\n            />\r\n            <IconButton color={'primary'} onClick={addTask}>\r\n            <AddBox/>\r\n            </IconButton>\r\n            {/*<Button variant={'contained'} color={'primary'} onClick={addTask}> +</Button>*/}\r\n            {/*<button onClick={addTask}> +</button>*/}\r\n            {/*{error &&*/}\r\n            {/*// <div className='error-message'> {error}</div>*/}\r\n            {/*}*/}\r\n        </div>\r\n\r\n    )\r\n})","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('edit')\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }, [])\r\n    return editMode\r\n        ? <TextField variant={'outlined'} value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode}\r\n                     autoFocus={true}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title} </span>\r\n})","import {TasksStateType} from \"../App\";\r\nimport {AddTodoListACType, RemoveTodoListACType, setTodoListACType} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todoListApi, UpdateTask} from \"../api/todoList-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../store/store\";\r\n\r\n// export let todoListId1 = v1()\r\n// export let todoListId2 = v1()\r\n\r\n// let initialState: TasksStateType = {\r\n//     [todoListId1]: [\r\n//         {id: v1(), title: 'CSS', isDone: true},\r\n//         {id: v1(), title: 'React', isDone: false},\r\n//     ],\r\n//     [todoListId2]: [\r\n//         {id: v1(), title: 'CSS', isDone: true},\r\n//         {id: v1(), title: 'React', isDone: false},\r\n//     ]\r\n// }\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const tasksReducer = (state: InitialStateType = initialState, action: ActionsType): TasksStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            const stateCopy = {...state}     // делаем копию стейта\r\n            let tasks = state[action.todoListId]                                                       // удаление таски\r\n            let filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todoListId] = filteredTasks\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = {...state}\r\n            const newTask = action.task\r\n\r\n            //достаем нужный массив по todoListId\r\n            let tasks = stateCopy[newTask.todoListId]\r\n            let newTasks = [newTask, ...tasks]\r\n            stateCopy[newTask.todoListId] = newTasks                   // [newTask, ...tasks]\r\n            return stateCopy\r\n        }\r\n\r\n        case \"UPDATE-TASK\": {\r\n            let todolistTasks = state[action.todoListId]                     //чекбокс\r\n            state[action.todoListId] = todolistTasks.map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            return ({...state})\r\n        }\r\n\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.todoList.id]: []\r\n            }\r\n            // const stateCopy = {...state}\r\n            // stateCopy[action.todoListId] = []\r\n            // return stateCopy\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todoListId]\r\n            return stateCopy\r\n        }\r\n        case \"SET-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            action.todoList.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASK\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoListIs] = action.tasks\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => ({type: 'REMOVE-TASK', taskId, todoListId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListId: string) => ({type: 'UPDATE-TASK', taskId, model, todoListId} as const)\r\nexport const setTaskAC = (tasks: Array<TaskType>, todoListIs: string) => ({type: 'SET-TASK', tasks, todoListIs} as const)\r\n\r\n\r\n// type UpdateDomainTaskModelType={\r\n//     title?: string\r\n//     description?: string\r\n//     status?: number\r\n//     priority?: number\r\n//     startDate?: string\r\n//     deadline?: string\r\n// }\r\n\r\n\r\nexport type removeTaskACType = ReturnType<typeof removeTaskAC>\r\nexport type addTaskACType = ReturnType<typeof addTaskAC>\r\nexport type setTaskACType = ReturnType<typeof setTaskAC>\r\nexport type UpdateTaskACType = ReturnType<typeof updateTaskAC>\r\n\r\ntype ActionsType = removeTaskACType\r\n    | addTaskACType\r\n    | AddTodoListACType\r\n    | RemoveTodoListACType\r\n    | setTodoListACType\r\n    | setTaskACType\r\n| UpdateTaskACType\r\n\r\nexport type UpdateDomainTaskModelType={\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n\r\nexport const fetchTasksTC = (todoListId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListApi.getTasks(todoListId)\r\n            .then((res) => {\r\n                dispatch(setTaskAC(res.data.items, todoListId))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTS = (taskId: string, todoListId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListApi.deleteTask(todoListId, taskId)\r\n            .then((res) => {\r\n                const action = removeTaskAC(taskId, todoListId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n}\r\nexport const addTaskTS = (title: string, todoListId: string,) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListApi.createTask(todoListId, title)\r\n            .then((res) => {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n            })\r\n    }\r\n}\r\nexport const updateTaskTC = ( taskId: string, domainModel: UpdateDomainTaskModelType, todoListId: string,) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todoListId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        let apiModel: UpdateTask = {\r\n            priority: task.priority,\r\n            status: task.status,\r\n            title: task.title,\r\n            deadline: task.deadline,\r\n            startDate: task.startDate,\r\n            description: task.description,\r\n                ...domainModel\r\n        }\r\n        todoListApi.updateTask(todoListId, taskId, apiModel)\r\n            .then((res) => {\r\n                const action = updateTaskAC(taskId, domainModel, todoListId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n}\r\n\r\n","import {useDispatch} from \"react-redux\";\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"./api/todoList-api\";\r\nimport { removeTaskTS, updateTaskTC} from \"./redux/tasks-reducer\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    t: TaskType\r\n    todoListId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    let onRemoveHandler = useCallback(() => {                //удаление таски\r\n        const thunk = removeTaskTS(props.t.id, props.todoListId);\r\n        dispatch(thunk);\r\n\r\n    }, [])\r\n\r\n    // let onRemoveHandler = () => dispatch(removeTaskAC(props.t.id, props.todoListId))\r\n    // let onRemoveHandler = useCallback(()=>props.removeTask(props.t.id, props.todoListId),[props.t.id, props.todoListId])\r\n\r\n\r\n    let onChangeStatusHandler = useCallback((event: ChangeEvent<HTMLInputElement>) => {  //  контролируемый чекбокс\r\n        let newIsDoneValue = event.currentTarget.checked\r\n        let thunk = updateTaskTC(props.t.id, {status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New}, props.todoListId)\r\n        dispatch(thunk)\r\n        // dispatch(changeTaskStatusAC(props.t.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId))\r\n        // props.changeTaskStatus(props.t.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n    }, [props.t.id, props.todoListId])\r\n\r\n\r\n    let onChangeTitleHandler = useCallback((newValue: string) => {\r\n        let thunk = updateTaskTC(props.t.id, {title: newValue}, props.todoListId)\r\n        dispatch(thunk)\r\n        // dispatch(updateTaskAC(props.t.id, {title:newValue}, props.todoListId))\r\n        // props.changeTaskTitle(props.t.id, newValue, props.todoListId)\r\n    }, [props.t.id, props.todoListId])\r\n    //key обязательно\r\n    return <div key={props.t.id} className={props.t.status === TaskStatuses.New ? 'is-done' : ''}>\r\n\r\n        <Checkbox color={'primary'} checked={props.t.status === TaskStatuses.Completed}\r\n                  onChange={onChangeStatusHandler}/>\r\n        <EditableSpan title={props.t.title} onChange={onChangeTitleHandler}/>\r\n\r\n\r\n        <IconButton onClick={onRemoveHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    addTaskTS,\r\n    fetchTasksTC,\r\n} from \"./redux/tasks-reducer\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatuses, TaskType} from \"./api/todoList-api\";\r\nimport {FilterValueType, TodoListDomainType} from \"./redux/todolists-reducer\";\r\nimport {AppRootStateType} from \"./store/store\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    changeFilter: (value: FilterValueType, todoListId: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValueType\r\n    removeTodoList: (todoListId: string) => void\r\n}\r\n\r\n\r\nexport const TodoList = React.memo((props: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))  //запрос тасок по id tl\r\n    }, [])\r\n\r\n    const addTask = useCallback(( title: string)=> {    //добавление новой таски\r\n        const thunk = addTaskTS(title, props.id )\r\n        dispatch(thunk)\r\n    }, []);\r\n\r\n\r\n\r\n    let onClickAllHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])  // в одну строчку без {}\r\n    let onClickActiveHandler = useCallback(() => {props.changeFilter('active', props.id)}, [props.changeFilter, props.id])\r\n    let onClickCompletedHandler = useCallback(() => {props.changeFilter('completed', props.id)}, [props.changeFilter, props.id])\r\n\r\n\r\n    let removeTodoList = () => {\r\n        props.removeTodoList(props.id)\r\n    }\r\n    // function changeTitle(id: string, newTitle: string, todoListId: string) {\r\n    //     dispatch(changeTaskTitleAC(id, newTitle, todoListId))\r\n    // }\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        // dispatch(changeTaskTitleAC(props.id, newTitle, todoListId))\r\n        props.changeTodoListTitle(props.id, newTitle)\r\n    }, [props.id, props.changeTodoListTitle])\r\n\r\n\r\n    let taskForTodoList = tasks     // берем из объекта tasks и достаем по id\r\n    if (props.filter === 'active') {\r\n        taskForTodoList = tasks.filter(t => t.status===TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        taskForTodoList = tasks.filter(t => t.status===TaskStatuses.Completed)    //t.isDone === true\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={changeTodoListTitle}/>\r\n                {/*<button onClick={removeTodoList}>x</button>*/}\r\n                <IconButton onClick={removeTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                <div>\r\n                    {\r\n                        taskForTodoList.map(t =>\r\n                        <Task t={t} todoListId={props.id} key={t.id}\r\n                        />\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <Button color={'default'} variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                        onClick={onClickAllHandler}>All\r\n                </Button>\r\n                <Button color={'primary'} variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                        onClick={onClickActiveHandler}>Active\r\n                </Button>\r\n                <Button color={'secondary'} variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                        onClick={onClickCompletedHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","\r\nimport {v1} from \"uuid\";\r\nimport {Dispatch} from \"redux\";\r\nimport {todoListApi, TodoListType} from \"../api/todoList-api\";\r\nimport {addTaskAC} from \"./tasks-reducer\";\r\n\r\n\r\n// let initialState: Array<TodoListType> = [\r\n//     {id: todoListId1, title: 'What to learn ', filter: 'all'},\r\n//     {id: todoListId2, title: 'What to learn ', filter: 'all'},\r\n// ]\r\n\r\n\r\n\r\n\r\nlet initialState: Array<TodoListDomainType> = []\r\n\r\nexport type FilterValueType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValueType\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const todoListReducer = (state: InitialStateType = initialState, action: ActionsType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.todoListId)\r\n        }\r\n\r\n        case \"ADD-TODOLIST\": {\r\n         let   newTodoList: TodoListDomainType = {...action.todoList, filter: 'all'}\r\n            return [newTodoList, ...state]\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            let todoList = state.find(tl => tl.id === action.id)\r\n            if (todoList) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todoList.title = action.newTitle\r\n            }\r\n            return [...state]\r\n        }\r\n\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            let todiList = state.find(tl => tl.id === action.todoListId)\r\n            if (todiList) {\r\n                todiList.filter = action.filter\r\n            }\r\n            return [...state]\r\n        }\r\n\r\n\r\n\r\n        case \"SET-TODOLIST\": {\r\n            return action.todoList.map(tl => {\r\n                return {\r\n                    ...tl, filter: 'all'\r\n                }\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const changeTodoListFilterAC = (filter: FilterValueType, todoListId: string) => ({type: 'CHANGE-TODOLIST-FILTER', filter, todoListId} as const)\r\nexport const removeTodoListAC = (todoListId: string) => ({type: 'REMOVE-TODOLIST', todoListId} as const)\r\n// export const addTodoListAC = (todoList: TodoListType) => ({type: 'ADD-TODOLIST', todoList} as const)\r\nexport const addTodoListAC = (todoList: TodoListType) => ({type: 'ADD-TODOLIST', todoList} as const)\r\nexport const setTodoListAC = (todoList: Array<TodoListType>) => ({type: 'SET-TODOLIST', todoList: todoList} as const)\r\nexport const changeTodoListTitleAC = (id: string, newTitle: string) => ({type: 'CHANGE-TODOLIST-TITLE', id, newTitle\r\n} as const)\r\n\r\n\r\n\r\n\r\nexport type ChangeFilterACType = ReturnType<typeof changeTodoListFilterAC>\r\nexport type RemoveTodoListACType = ReturnType<typeof removeTodoListAC>\r\nexport type AddTodoListACType = ReturnType<typeof addTodoListAC>\r\nexport type ChangeTodoListTitleACType = ReturnType<typeof changeTodoListTitleAC>\r\nexport type setTodoListACType = ReturnType<typeof setTodoListAC>\r\n\r\ntype ActionsType =\r\n    | ChangeFilterACType\r\n    | RemoveTodoListACType\r\n    | AddTodoListACType\r\n    | ChangeTodoListTitleACType\r\n    | setTodoListACType\r\n\r\n\r\nexport const fetchTodoListTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListApi.getTodoList()\r\n            .then((res) => {\r\n                dispatch(setTodoListAC(res.data))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodoListTC = ( todoListId: string,) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListApi.deleteTodoList(todoListId)\r\n            .then((res) => {\r\n                dispatch(removeTodoListAC(todoListId))\r\n            })\r\n    }\r\n}\r\nexport const addTodoListTC = ( title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListApi.createTodoList(title)\r\n            .then((res) => {\r\n                dispatch(addTodoListAC(res.data.data.item))\r\n            })\r\n    }\r\n}\r\nexport const changeTodoListTitleTC = ( todoListId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListApi.updateTodoList(todoListId, title)\r\n            .then((res) => {\r\n                dispatch(changeTodoListTitleAC(todoListId, title))\r\n            })\r\n    }\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport { TodoList} from \"./TodoList\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport {\n    addTodoListTC,\n    changeTodoListFilterAC,\n    changeTodoListTitleTC, fetchTodoListTC, FilterValueType,\n     removeTodoListTC, TodoListDomainType,\n} from \"./redux/todolists-reducer\";\nimport {AppRootStateType} from \"./store/store\";\nimport {TaskStatuses, TaskType} from \"./api/todoList-api\";\n\n\n\n//генерировать текстовые уникальные id\n\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>,\n}\n\nfunction App() {\n    const dispatch = useDispatch()\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n\n\n    useEffect(() => {\n        dispatch(fetchTodoListTC())\n    }, [])\n\n\n    const changeFilter = useCallback((value: FilterValueType, todoListId: string) => {\n        dispatch(changeTodoListFilterAC(value, todoListId))                     //!!!!!\n    }, [dispatch])\n\n\n    const removeTodoList = useCallback((todoListId: string) => {\n        let thunk = removeTodoListTC(todoListId)\n        dispatch(thunk)\n    }, [dispatch])\n\n    const changeTodoListTitle = useCallback((todoListId: string, netTitle: string) => {\n        let thunk = changeTodoListTitleTC(todoListId, netTitle)\n        dispatch(thunk)\n    }, [dispatch])\n\n    const addTodoList = useCallback((title: string) => {\n          let thunk = addTodoListTC(title)                                 //кэширование функции\n        dispatch(thunk)\n    }, [dispatch])\n\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        Todolist\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: \"20px\"}}>\n                    <AddItemForm addItem={addTodoList}/>\n                </Grid>\n                <Grid container spacing={3}>\n                    {\n\n                        todoLists.map((tl) => {\n                            let allTodolistTasks = tasks[tl.id]\n                            return <Grid item >\n                                <Paper style={{padding: \"10px\"}}>\n                                    <TodoList\n                                        key={tl.id}\n                                        id={tl.id}\n                                        title={tl.title}\n                                        changeFilter={changeFilter}\n                                        filter={tl.filter}\n                                        removeTodoList={removeTodoList}\n                                        changeTodoListTitle={changeTodoListTitle}\n                                    />\n                                </Paper>\n                            </Grid>\n                        })\n                    }\n\n                </Grid>\n            </Container>\n        </div>\n\n    );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {todoListReducer} from \"../redux/todolists-reducer\";\r\nimport {tasksReducer} from \"../redux/tasks-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\n// import thunkMiddleware from 'redux-thunk'\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListReducer,\r\n    tasks: tasksReducer,\r\n\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));  // applyMiddleware(thunkMiddleware)\r\n// определить автоматически тип всего объекта состояния\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// export type AppRootStateType = typeof store   типизация стора\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}